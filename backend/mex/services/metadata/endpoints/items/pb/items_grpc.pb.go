// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: services/metadata/endpoints/items/items.proto

package itemspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Items_CreateItem_FullMethodName                       = "/d4l.mex.items.Items/CreateItem"
	Items_CreateItemsBulk_FullMethodName                  = "/d4l.mex.items.Items/CreateItemsBulk"
	Items_ListItems_FullMethodName                        = "/d4l.mex.items.Items/ListItems"
	Items_GetItem_FullMethodName                          = "/d4l.mex.items.Items/GetItem"
	Items_DeleteItem_FullMethodName                       = "/d4l.mex.items.Items/DeleteItem"
	Items_DeleteItems_FullMethodName                      = "/d4l.mex.items.Items/DeleteItems"
	Items_DeleteAllItems_FullMethodName                   = "/d4l.mex.items.Items/DeleteAllItems"
	Items_ComputeVersions_FullMethodName                  = "/d4l.mex.items.Items/ComputeVersions"
	Items_ComputeVersionsByBusinessID_FullMethodName      = "/d4l.mex.items.Items/ComputeVersionsByBusinessID"
	Items_CreateRelation_FullMethodName                   = "/d4l.mex.items.Items/CreateRelation"
	Items_CreateRelationsFromBusinessIds_FullMethodName   = "/d4l.mex.items.Items/CreateRelationsFromBusinessIds"
	Items_CreateRelationsFromOriginalItems_FullMethodName = "/d4l.mex.items.Items/CreateRelationsFromOriginalItems"
	Items_ListRelations_FullMethodName                    = "/d4l.mex.items.Items/ListRelations"
	Items_AggregateItems_FullMethodName                   = "/d4l.mex.items.Items/AggregateItems"
	Items_ListAllVersions_FullMethodName                  = "/d4l.mex.items.Items/ListAllVersions"
	Items_ComputeItemsTree_FullMethodName                 = "/d4l.mex.items.Items/ComputeItemsTree"
)

// ItemsClient is the client API for Items service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemsClient interface {
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error)
	CreateItemsBulk(ctx context.Context, in *CreateItemsBulkRequest, opts ...grpc.CallOption) (*CreateItemsBulkResponse, error)
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	DeleteItems(ctx context.Context, in *DeleteItemsRequest, opts ...grpc.CallOption) (*DeleteItemsResponse, error)
	DeleteAllItems(ctx context.Context, in *DeleteAllItemsRequest, opts ...grpc.CallOption) (*DeleteAllItemsResponse, error)
	// Explicitly not called "List*", because we are not just listing existing resources.
	ComputeVersions(ctx context.Context, in *ComputeVersionsRequest, opts ...grpc.CallOption) (*ComputeVersionsResponse, error)
	ComputeVersionsByBusinessID(ctx context.Context, in *ComputeVersionsByBusinessIdRequest, opts ...grpc.CallOption) (*ComputeVersionsByBusinessIdResponse, error)
	CreateRelation(ctx context.Context, in *CreateRelationRequest, opts ...grpc.CallOption) (*CreateRelationResponse, error)
	CreateRelationsFromBusinessIds(ctx context.Context, in *CreateRelationsFromBusinessIdsRequest, opts ...grpc.CallOption) (*CreateRelationsFromBusinessIdsResponse, error)
	CreateRelationsFromOriginalItems(ctx context.Context, in *CreateRelationsFromOriginalItemsRequest, opts ...grpc.CallOption) (*CreateRelationsFromOriginalItemsResponse, error)
	ListRelations(ctx context.Context, in *ListRelationsRequest, opts ...grpc.CallOption) (*ListRelationsResponse, error)
	AggregateItems(ctx context.Context, in *AggregateItemsRequest, opts ...grpc.CallOption) (*AggregateItemsResponse, error)
	ListAllVersions(ctx context.Context, in *ListAllVersionsRequest, opts ...grpc.CallOption) (*ListAllVersionsResponse, error)
	ComputeItemsTree(ctx context.Context, in *ComputeItemsTreeRequest, opts ...grpc.CallOption) (*ComputeItemsTreeResponse, error)
}

type itemsClient struct {
	cc grpc.ClientConnInterface
}

func NewItemsClient(cc grpc.ClientConnInterface) ItemsClient {
	return &itemsClient{cc}
}

func (c *itemsClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error) {
	out := new(CreateItemResponse)
	err := c.cc.Invoke(ctx, Items_CreateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) CreateItemsBulk(ctx context.Context, in *CreateItemsBulkRequest, opts ...grpc.CallOption) (*CreateItemsBulkResponse, error) {
	out := new(CreateItemsBulkResponse)
	err := c.cc.Invoke(ctx, Items_CreateItemsBulk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	out := new(ListItemsResponse)
	err := c.cc.Invoke(ctx, Items_ListItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, Items_GetItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, Items_DeleteItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) DeleteItems(ctx context.Context, in *DeleteItemsRequest, opts ...grpc.CallOption) (*DeleteItemsResponse, error) {
	out := new(DeleteItemsResponse)
	err := c.cc.Invoke(ctx, Items_DeleteItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) DeleteAllItems(ctx context.Context, in *DeleteAllItemsRequest, opts ...grpc.CallOption) (*DeleteAllItemsResponse, error) {
	out := new(DeleteAllItemsResponse)
	err := c.cc.Invoke(ctx, Items_DeleteAllItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) ComputeVersions(ctx context.Context, in *ComputeVersionsRequest, opts ...grpc.CallOption) (*ComputeVersionsResponse, error) {
	out := new(ComputeVersionsResponse)
	err := c.cc.Invoke(ctx, Items_ComputeVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) ComputeVersionsByBusinessID(ctx context.Context, in *ComputeVersionsByBusinessIdRequest, opts ...grpc.CallOption) (*ComputeVersionsByBusinessIdResponse, error) {
	out := new(ComputeVersionsByBusinessIdResponse)
	err := c.cc.Invoke(ctx, Items_ComputeVersionsByBusinessID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) CreateRelation(ctx context.Context, in *CreateRelationRequest, opts ...grpc.CallOption) (*CreateRelationResponse, error) {
	out := new(CreateRelationResponse)
	err := c.cc.Invoke(ctx, Items_CreateRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) CreateRelationsFromBusinessIds(ctx context.Context, in *CreateRelationsFromBusinessIdsRequest, opts ...grpc.CallOption) (*CreateRelationsFromBusinessIdsResponse, error) {
	out := new(CreateRelationsFromBusinessIdsResponse)
	err := c.cc.Invoke(ctx, Items_CreateRelationsFromBusinessIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) CreateRelationsFromOriginalItems(ctx context.Context, in *CreateRelationsFromOriginalItemsRequest, opts ...grpc.CallOption) (*CreateRelationsFromOriginalItemsResponse, error) {
	out := new(CreateRelationsFromOriginalItemsResponse)
	err := c.cc.Invoke(ctx, Items_CreateRelationsFromOriginalItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) ListRelations(ctx context.Context, in *ListRelationsRequest, opts ...grpc.CallOption) (*ListRelationsResponse, error) {
	out := new(ListRelationsResponse)
	err := c.cc.Invoke(ctx, Items_ListRelations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) AggregateItems(ctx context.Context, in *AggregateItemsRequest, opts ...grpc.CallOption) (*AggregateItemsResponse, error) {
	out := new(AggregateItemsResponse)
	err := c.cc.Invoke(ctx, Items_AggregateItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) ListAllVersions(ctx context.Context, in *ListAllVersionsRequest, opts ...grpc.CallOption) (*ListAllVersionsResponse, error) {
	out := new(ListAllVersionsResponse)
	err := c.cc.Invoke(ctx, Items_ListAllVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) ComputeItemsTree(ctx context.Context, in *ComputeItemsTreeRequest, opts ...grpc.CallOption) (*ComputeItemsTreeResponse, error) {
	out := new(ComputeItemsTreeResponse)
	err := c.cc.Invoke(ctx, Items_ComputeItemsTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemsServer is the server API for Items service.
// All implementations must embed UnimplementedItemsServer
// for forward compatibility
type ItemsServer interface {
	CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error)
	CreateItemsBulk(context.Context, *CreateItemsBulkRequest) (*CreateItemsBulkResponse, error)
	ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error)
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	DeleteItems(context.Context, *DeleteItemsRequest) (*DeleteItemsResponse, error)
	DeleteAllItems(context.Context, *DeleteAllItemsRequest) (*DeleteAllItemsResponse, error)
	// Explicitly not called "List*", because we are not just listing existing resources.
	ComputeVersions(context.Context, *ComputeVersionsRequest) (*ComputeVersionsResponse, error)
	ComputeVersionsByBusinessID(context.Context, *ComputeVersionsByBusinessIdRequest) (*ComputeVersionsByBusinessIdResponse, error)
	CreateRelation(context.Context, *CreateRelationRequest) (*CreateRelationResponse, error)
	CreateRelationsFromBusinessIds(context.Context, *CreateRelationsFromBusinessIdsRequest) (*CreateRelationsFromBusinessIdsResponse, error)
	CreateRelationsFromOriginalItems(context.Context, *CreateRelationsFromOriginalItemsRequest) (*CreateRelationsFromOriginalItemsResponse, error)
	ListRelations(context.Context, *ListRelationsRequest) (*ListRelationsResponse, error)
	AggregateItems(context.Context, *AggregateItemsRequest) (*AggregateItemsResponse, error)
	ListAllVersions(context.Context, *ListAllVersionsRequest) (*ListAllVersionsResponse, error)
	ComputeItemsTree(context.Context, *ComputeItemsTreeRequest) (*ComputeItemsTreeResponse, error)
	mustEmbedUnimplementedItemsServer()
}

// UnimplementedItemsServer must be embedded to have forward compatible implementations.
type UnimplementedItemsServer struct {
}

func (UnimplementedItemsServer) CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedItemsServer) CreateItemsBulk(context.Context, *CreateItemsBulkRequest) (*CreateItemsBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemsBulk not implemented")
}
func (UnimplementedItemsServer) ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedItemsServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedItemsServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedItemsServer) DeleteItems(context.Context, *DeleteItemsRequest) (*DeleteItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItems not implemented")
}
func (UnimplementedItemsServer) DeleteAllItems(context.Context, *DeleteAllItemsRequest) (*DeleteAllItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllItems not implemented")
}
func (UnimplementedItemsServer) ComputeVersions(context.Context, *ComputeVersionsRequest) (*ComputeVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeVersions not implemented")
}
func (UnimplementedItemsServer) ComputeVersionsByBusinessID(context.Context, *ComputeVersionsByBusinessIdRequest) (*ComputeVersionsByBusinessIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeVersionsByBusinessID not implemented")
}
func (UnimplementedItemsServer) CreateRelation(context.Context, *CreateRelationRequest) (*CreateRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelation not implemented")
}
func (UnimplementedItemsServer) CreateRelationsFromBusinessIds(context.Context, *CreateRelationsFromBusinessIdsRequest) (*CreateRelationsFromBusinessIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelationsFromBusinessIds not implemented")
}
func (UnimplementedItemsServer) CreateRelationsFromOriginalItems(context.Context, *CreateRelationsFromOriginalItemsRequest) (*CreateRelationsFromOriginalItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelationsFromOriginalItems not implemented")
}
func (UnimplementedItemsServer) ListRelations(context.Context, *ListRelationsRequest) (*ListRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRelations not implemented")
}
func (UnimplementedItemsServer) AggregateItems(context.Context, *AggregateItemsRequest) (*AggregateItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateItems not implemented")
}
func (UnimplementedItemsServer) ListAllVersions(context.Context, *ListAllVersionsRequest) (*ListAllVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllVersions not implemented")
}
func (UnimplementedItemsServer) ComputeItemsTree(context.Context, *ComputeItemsTreeRequest) (*ComputeItemsTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeItemsTree not implemented")
}
func (UnimplementedItemsServer) mustEmbedUnimplementedItemsServer() {}

// UnsafeItemsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemsServer will
// result in compilation errors.
type UnsafeItemsServer interface {
	mustEmbedUnimplementedItemsServer()
}

func RegisterItemsServer(s grpc.ServiceRegistrar, srv ItemsServer) {
	s.RegisterService(&Items_ServiceDesc, srv)
}

func _Items_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_CreateItemsBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemsBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).CreateItemsBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_CreateItemsBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).CreateItemsBulk(ctx, req.(*CreateItemsBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_ListItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).ListItems(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_DeleteItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).DeleteItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_DeleteItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).DeleteItems(ctx, req.(*DeleteItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_DeleteAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).DeleteAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_DeleteAllItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).DeleteAllItems(ctx, req.(*DeleteAllItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_ComputeVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).ComputeVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_ComputeVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).ComputeVersions(ctx, req.(*ComputeVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_ComputeVersionsByBusinessID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeVersionsByBusinessIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).ComputeVersionsByBusinessID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_ComputeVersionsByBusinessID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).ComputeVersionsByBusinessID(ctx, req.(*ComputeVersionsByBusinessIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_CreateRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).CreateRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_CreateRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).CreateRelation(ctx, req.(*CreateRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_CreateRelationsFromBusinessIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelationsFromBusinessIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).CreateRelationsFromBusinessIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_CreateRelationsFromBusinessIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).CreateRelationsFromBusinessIds(ctx, req.(*CreateRelationsFromBusinessIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_CreateRelationsFromOriginalItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelationsFromOriginalItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).CreateRelationsFromOriginalItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_CreateRelationsFromOriginalItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).CreateRelationsFromOriginalItems(ctx, req.(*CreateRelationsFromOriginalItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_ListRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).ListRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_ListRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).ListRelations(ctx, req.(*ListRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_AggregateItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).AggregateItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_AggregateItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).AggregateItems(ctx, req.(*AggregateItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_ListAllVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).ListAllVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_ListAllVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).ListAllVersions(ctx, req.(*ListAllVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_ComputeItemsTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeItemsTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).ComputeItemsTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_ComputeItemsTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).ComputeItemsTree(ctx, req.(*ComputeItemsTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Items_ServiceDesc is the grpc.ServiceDesc for Items service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Items_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "d4l.mex.items.Items",
	HandlerType: (*ItemsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _Items_CreateItem_Handler,
		},
		{
			MethodName: "CreateItemsBulk",
			Handler:    _Items_CreateItemsBulk_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _Items_ListItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _Items_GetItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _Items_DeleteItem_Handler,
		},
		{
			MethodName: "DeleteItems",
			Handler:    _Items_DeleteItems_Handler,
		},
		{
			MethodName: "DeleteAllItems",
			Handler:    _Items_DeleteAllItems_Handler,
		},
		{
			MethodName: "ComputeVersions",
			Handler:    _Items_ComputeVersions_Handler,
		},
		{
			MethodName: "ComputeVersionsByBusinessID",
			Handler:    _Items_ComputeVersionsByBusinessID_Handler,
		},
		{
			MethodName: "CreateRelation",
			Handler:    _Items_CreateRelation_Handler,
		},
		{
			MethodName: "CreateRelationsFromBusinessIds",
			Handler:    _Items_CreateRelationsFromBusinessIds_Handler,
		},
		{
			MethodName: "CreateRelationsFromOriginalItems",
			Handler:    _Items_CreateRelationsFromOriginalItems_Handler,
		},
		{
			MethodName: "ListRelations",
			Handler:    _Items_ListRelations_Handler,
		},
		{
			MethodName: "AggregateItems",
			Handler:    _Items_AggregateItems_Handler,
		},
		{
			MethodName: "ListAllVersions",
			Handler:    _Items_ListAllVersions_Handler,
		},
		{
			MethodName: "ComputeItemsTree",
			Handler:    _Items_ComputeItemsTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/metadata/endpoints/items/items.proto",
}
