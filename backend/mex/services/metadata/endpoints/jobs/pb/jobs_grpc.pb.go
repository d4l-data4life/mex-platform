// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: services/metadata/endpoints/jobs/jobs.proto

package jobspb

import (
	context "context"
	jobspb "github.com/d4l-data4life/mex/mex/shared/known/jobspb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Jobs_CreateJob_FullMethodName = "/d4l.mex.jobs.Jobs/CreateJob"
	Jobs_GetLogs_FullMethodName   = "/d4l.mex.jobs.Jobs/GetLogs"
	Jobs_GetItems_FullMethodName  = "/d4l.mex.jobs.Jobs/GetItems"
	Jobs_GetJob_FullMethodName    = "/d4l.mex.jobs.Jobs/GetJob"
	Jobs_AddLogs_FullMethodName   = "/d4l.mex.jobs.Jobs/AddLogs"
	Jobs_AddItems_FullMethodName  = "/d4l.mex.jobs.Jobs/AddItems"
	Jobs_SetStatus_FullMethodName = "/d4l.mex.jobs.Jobs/SetStatus"
	Jobs_SetError_FullMethodName  = "/d4l.mex.jobs.Jobs/SetError"
)

// JobsClient is the client API for Jobs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobsClient interface {
	CreateJob(ctx context.Context, in *jobspb.CreateJobRequest, opts ...grpc.CallOption) (*jobspb.CreateJobResponse, error)
	GetLogs(ctx context.Context, in *jobspb.GetJobLogsRequest, opts ...grpc.CallOption) (*jobspb.GetJobLogsResponse, error)
	GetItems(ctx context.Context, in *jobspb.GetJobItemsRequest, opts ...grpc.CallOption) (*jobspb.GetJobItemsResponse, error)
	GetJob(ctx context.Context, in *jobspb.GetJobRequest, opts ...grpc.CallOption) (*jobspb.GetJobResponse, error)
	AddLogs(ctx context.Context, in *jobspb.AddJobLogsRequest, opts ...grpc.CallOption) (*jobspb.AddJobLogsResponse, error)
	AddItems(ctx context.Context, in *jobspb.AddJobItemsRequest, opts ...grpc.CallOption) (*jobspb.AddJobItemsResponse, error)
	SetStatus(ctx context.Context, in *jobspb.SetJobStatusRequest, opts ...grpc.CallOption) (*jobspb.SetJobStatusResponse, error)
	SetError(ctx context.Context, in *jobspb.SetJobErrorRequest, opts ...grpc.CallOption) (*jobspb.SetJobErrorResponse, error)
}

type jobsClient struct {
	cc grpc.ClientConnInterface
}

func NewJobsClient(cc grpc.ClientConnInterface) JobsClient {
	return &jobsClient{cc}
}

func (c *jobsClient) CreateJob(ctx context.Context, in *jobspb.CreateJobRequest, opts ...grpc.CallOption) (*jobspb.CreateJobResponse, error) {
	out := new(jobspb.CreateJobResponse)
	err := c.cc.Invoke(ctx, Jobs_CreateJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) GetLogs(ctx context.Context, in *jobspb.GetJobLogsRequest, opts ...grpc.CallOption) (*jobspb.GetJobLogsResponse, error) {
	out := new(jobspb.GetJobLogsResponse)
	err := c.cc.Invoke(ctx, Jobs_GetLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) GetItems(ctx context.Context, in *jobspb.GetJobItemsRequest, opts ...grpc.CallOption) (*jobspb.GetJobItemsResponse, error) {
	out := new(jobspb.GetJobItemsResponse)
	err := c.cc.Invoke(ctx, Jobs_GetItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) GetJob(ctx context.Context, in *jobspb.GetJobRequest, opts ...grpc.CallOption) (*jobspb.GetJobResponse, error) {
	out := new(jobspb.GetJobResponse)
	err := c.cc.Invoke(ctx, Jobs_GetJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) AddLogs(ctx context.Context, in *jobspb.AddJobLogsRequest, opts ...grpc.CallOption) (*jobspb.AddJobLogsResponse, error) {
	out := new(jobspb.AddJobLogsResponse)
	err := c.cc.Invoke(ctx, Jobs_AddLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) AddItems(ctx context.Context, in *jobspb.AddJobItemsRequest, opts ...grpc.CallOption) (*jobspb.AddJobItemsResponse, error) {
	out := new(jobspb.AddJobItemsResponse)
	err := c.cc.Invoke(ctx, Jobs_AddItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) SetStatus(ctx context.Context, in *jobspb.SetJobStatusRequest, opts ...grpc.CallOption) (*jobspb.SetJobStatusResponse, error) {
	out := new(jobspb.SetJobStatusResponse)
	err := c.cc.Invoke(ctx, Jobs_SetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) SetError(ctx context.Context, in *jobspb.SetJobErrorRequest, opts ...grpc.CallOption) (*jobspb.SetJobErrorResponse, error) {
	out := new(jobspb.SetJobErrorResponse)
	err := c.cc.Invoke(ctx, Jobs_SetError_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobsServer is the server API for Jobs service.
// All implementations must embed UnimplementedJobsServer
// for forward compatibility
type JobsServer interface {
	CreateJob(context.Context, *jobspb.CreateJobRequest) (*jobspb.CreateJobResponse, error)
	GetLogs(context.Context, *jobspb.GetJobLogsRequest) (*jobspb.GetJobLogsResponse, error)
	GetItems(context.Context, *jobspb.GetJobItemsRequest) (*jobspb.GetJobItemsResponse, error)
	GetJob(context.Context, *jobspb.GetJobRequest) (*jobspb.GetJobResponse, error)
	AddLogs(context.Context, *jobspb.AddJobLogsRequest) (*jobspb.AddJobLogsResponse, error)
	AddItems(context.Context, *jobspb.AddJobItemsRequest) (*jobspb.AddJobItemsResponse, error)
	SetStatus(context.Context, *jobspb.SetJobStatusRequest) (*jobspb.SetJobStatusResponse, error)
	SetError(context.Context, *jobspb.SetJobErrorRequest) (*jobspb.SetJobErrorResponse, error)
	mustEmbedUnimplementedJobsServer()
}

// UnimplementedJobsServer must be embedded to have forward compatible implementations.
type UnimplementedJobsServer struct {
}

func (UnimplementedJobsServer) CreateJob(context.Context, *jobspb.CreateJobRequest) (*jobspb.CreateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedJobsServer) GetLogs(context.Context, *jobspb.GetJobLogsRequest) (*jobspb.GetJobLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedJobsServer) GetItems(context.Context, *jobspb.GetJobItemsRequest) (*jobspb.GetJobItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedJobsServer) GetJob(context.Context, *jobspb.GetJobRequest) (*jobspb.GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedJobsServer) AddLogs(context.Context, *jobspb.AddJobLogsRequest) (*jobspb.AddJobLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLogs not implemented")
}
func (UnimplementedJobsServer) AddItems(context.Context, *jobspb.AddJobItemsRequest) (*jobspb.AddJobItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItems not implemented")
}
func (UnimplementedJobsServer) SetStatus(context.Context, *jobspb.SetJobStatusRequest) (*jobspb.SetJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (UnimplementedJobsServer) SetError(context.Context, *jobspb.SetJobErrorRequest) (*jobspb.SetJobErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetError not implemented")
}
func (UnimplementedJobsServer) mustEmbedUnimplementedJobsServer() {}

// UnsafeJobsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobsServer will
// result in compilation errors.
type UnsafeJobsServer interface {
	mustEmbedUnimplementedJobsServer()
}

func RegisterJobsServer(s grpc.ServiceRegistrar, srv JobsServer) {
	s.RegisterService(&Jobs_ServiceDesc, srv)
}

func _Jobs_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(jobspb.CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jobs_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).CreateJob(ctx, req.(*jobspb.CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(jobspb.GetJobLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jobs_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).GetLogs(ctx, req.(*jobspb.GetJobLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(jobspb.GetJobItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jobs_GetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).GetItems(ctx, req.(*jobspb.GetJobItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(jobspb.GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jobs_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).GetJob(ctx, req.(*jobspb.GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_AddLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(jobspb.AddJobLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).AddLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jobs_AddLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).AddLogs(ctx, req.(*jobspb.AddJobLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_AddItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(jobspb.AddJobItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).AddItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jobs_AddItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).AddItems(ctx, req.(*jobspb.AddJobItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(jobspb.SetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jobs_SetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).SetStatus(ctx, req.(*jobspb.SetJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_SetError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(jobspb.SetJobErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).SetError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jobs_SetError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).SetError(ctx, req.(*jobspb.SetJobErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Jobs_ServiceDesc is the grpc.ServiceDesc for Jobs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jobs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "d4l.mex.jobs.Jobs",
	HandlerType: (*JobsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _Jobs_CreateJob_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _Jobs_GetLogs_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _Jobs_GetItems_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Jobs_GetJob_Handler,
		},
		{
			MethodName: "AddLogs",
			Handler:    _Jobs_AddLogs_Handler,
		},
		{
			MethodName: "AddItems",
			Handler:    _Jobs_AddItems_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _Jobs_SetStatus_Handler,
		},
		{
			MethodName: "SetError",
			Handler:    _Jobs_SetError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/metadata/endpoints/jobs/jobs.proto",
}
