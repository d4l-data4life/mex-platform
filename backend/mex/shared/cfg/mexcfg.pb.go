// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.22.0
// source: shared/cfg/mexcfg.proto

package cfg

import (
	_ "github.com/d4l-data4life/mex/mex/shared/known/configpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DuplicateDetectionAlgorithm int32

const (
	// SIMPLE classifies an item as duplicate if its hash is identical to that of an existing item,
	// even if the latter is a non-current item (i.e., not the latest version).
	// This means that an item that changes back to a previous state after having been in another
	// state is classified as duplicate, meaning that the change will not be stored.
	DuplicateDetectionAlgorithm_SIMPLE DuplicateDetectionAlgorithm = 0
	// LATEST_ONLY classifies an item as duplicate only if its hash is equal to the hash of the
	// newest version of an existing item. This means that items can return to a previous states (after being in
	// another state) without being classified as duplicates.
	DuplicateDetectionAlgorithm_LATEST_ONLY DuplicateDetectionAlgorithm = 1
)

// Enum value maps for DuplicateDetectionAlgorithm.
var (
	DuplicateDetectionAlgorithm_name = map[int32]string{
		0: "SIMPLE",
		1: "LATEST_ONLY",
	}
	DuplicateDetectionAlgorithm_value = map[string]int32{
		"SIMPLE":      0,
		"LATEST_ONLY": 1,
	}
)

func (x DuplicateDetectionAlgorithm) Enum() *DuplicateDetectionAlgorithm {
	p := new(DuplicateDetectionAlgorithm)
	*p = x
	return p
}

func (x DuplicateDetectionAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DuplicateDetectionAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_cfg_mexcfg_proto_enumTypes[0].Descriptor()
}

func (DuplicateDetectionAlgorithm) Type() protoreflect.EnumType {
	return &file_shared_cfg_mexcfg_proto_enumTypes[0]
}

func (x DuplicateDetectionAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DuplicateDetectionAlgorithm.Descriptor instead.
func (DuplicateDetectionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0}
}

type RepoType int32

const (
	RepoType_DIRECT RepoType = 0
	RepoType_CACHED RepoType = 1
)

// Enum value maps for RepoType.
var (
	RepoType_name = map[int32]string{
		0: "DIRECT",
		1: "CACHED",
	}
	RepoType_value = map[string]int32{
		"DIRECT": 0,
		"CACHED": 1,
	}
)

func (x RepoType) Enum() *RepoType {
	p := new(RepoType)
	*p = x
	return p
}

func (x RepoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepoType) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_cfg_mexcfg_proto_enumTypes[1].Descriptor()
}

func (RepoType) Type() protoreflect.EnumType {
	return &file_shared_cfg_mexcfg_proto_enumTypes[1]
}

func (x RepoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepoType.Descriptor instead.
func (RepoType) EnumDescriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{1}
}

type EmailerType int32

const (
	EmailerType_MOCKMAILER EmailerType = 0
	EmailerType_FLOWMAILER EmailerType = 1
)

// Enum value maps for EmailerType.
var (
	EmailerType_name = map[int32]string{
		0: "MOCKMAILER",
		1: "FLOWMAILER",
	}
	EmailerType_value = map[string]int32{
		"MOCKMAILER": 0,
		"FLOWMAILER": 1,
	}
)

func (x EmailerType) Enum() *EmailerType {
	p := new(EmailerType)
	*p = x
	return p
}

func (x EmailerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailerType) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_cfg_mexcfg_proto_enumTypes[2].Descriptor()
}

func (EmailerType) Type() protoreflect.EnumType {
	return &file_shared_cfg_mexcfg_proto_enumTypes[2]
}

func (x EmailerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailerType.Descriptor instead.
func (EmailerType) EnumDescriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{2}
}

// Main configuration message for MEx.
type MexConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      *Version                `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	TenantId     string                  `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Web          *MexConfig_Web          `protobuf:"bytes,10,opt,name=web,proto3" json:"web,omitempty"`
	Db           *MexConfig_Postgres     `protobuf:"bytes,20,opt,name=db,proto3" json:"db,omitempty"`
	Solr         *MexConfig_Solr         `protobuf:"bytes,30,opt,name=solr,proto3" json:"solr,omitempty"`
	Redis        *MexConfig_Redis        `protobuf:"bytes,40,opt,name=redis,proto3" json:"redis,omitempty"`
	Oauth        *MexConfig_OAuth        `protobuf:"bytes,50,opt,name=oauth,proto3" json:"oauth,omitempty"`
	Codings      *MexConfig_Codings      `protobuf:"bytes,60,opt,name=codings,proto3" json:"codings,omitempty"`
	EntityTypes  *MexConfig_EntityTypes  `protobuf:"bytes,70,opt,name=entity_types,json=entityTypes,proto3" json:"entity_types,omitempty"`
	FieldDefs    *MexConfig_FieldDefs    `protobuf:"bytes,80,opt,name=field_defs,json=fieldDefs,proto3" json:"field_defs,omitempty"`
	SearchConfig *MexConfig_SearchConfig `protobuf:"bytes,90,opt,name=search_config,json=searchConfig,proto3" json:"search_config,omitempty"`
	Jwks         *MexConfig_Jwks         `protobuf:"bytes,100,opt,name=jwks,proto3" json:"jwks,omitempty"`
	Jobs         *MexConfig_Jobs         `protobuf:"bytes,110,opt,name=jobs,proto3" json:"jobs,omitempty"`
	AutoIndexer  *MexConfig_AutoIndexer  `protobuf:"bytes,120,opt,name=auto_indexer,json=autoIndexer,proto3" json:"auto_indexer,omitempty"`
	Indexing     *MexConfig_Indexing     `protobuf:"bytes,130,opt,name=indexing,proto3" json:"indexing,omitempty"`
	Logging      *MexConfig_Logging      `protobuf:"bytes,140,opt,name=logging,proto3" json:"logging,omitempty"`
	Telemetry    *MexConfig_Telemetry    `protobuf:"bytes,150,opt,name=telemetry,proto3" json:"telemetry,omitempty"`
	Auth         *MexConfig_Auth         `protobuf:"bytes,160,opt,name=auth,proto3" json:"auth,omitempty"`
	Services     *MexConfig_Services     `protobuf:"bytes,170,opt,name=services,proto3" json:"services,omitempty"`
	Strictness   *MexConfig_Strictness   `protobuf:"bytes,180,opt,name=strictness,proto3" json:"strictness,omitempty"`
	Notify       *MexConfig_Notify       `protobuf:"bytes,190,opt,name=notify,proto3" json:"notify,omitempty"`
}

func (x *MexConfig) Reset() {
	*x = MexConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig) ProtoMessage() {}

func (x *MexConfig) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig.ProtoReflect.Descriptor instead.
func (*MexConfig) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0}
}

func (x *MexConfig) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *MexConfig) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *MexConfig) GetWeb() *MexConfig_Web {
	if x != nil {
		return x.Web
	}
	return nil
}

func (x *MexConfig) GetDb() *MexConfig_Postgres {
	if x != nil {
		return x.Db
	}
	return nil
}

func (x *MexConfig) GetSolr() *MexConfig_Solr {
	if x != nil {
		return x.Solr
	}
	return nil
}

func (x *MexConfig) GetRedis() *MexConfig_Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *MexConfig) GetOauth() *MexConfig_OAuth {
	if x != nil {
		return x.Oauth
	}
	return nil
}

func (x *MexConfig) GetCodings() *MexConfig_Codings {
	if x != nil {
		return x.Codings
	}
	return nil
}

func (x *MexConfig) GetEntityTypes() *MexConfig_EntityTypes {
	if x != nil {
		return x.EntityTypes
	}
	return nil
}

func (x *MexConfig) GetFieldDefs() *MexConfig_FieldDefs {
	if x != nil {
		return x.FieldDefs
	}
	return nil
}

func (x *MexConfig) GetSearchConfig() *MexConfig_SearchConfig {
	if x != nil {
		return x.SearchConfig
	}
	return nil
}

func (x *MexConfig) GetJwks() *MexConfig_Jwks {
	if x != nil {
		return x.Jwks
	}
	return nil
}

func (x *MexConfig) GetJobs() *MexConfig_Jobs {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *MexConfig) GetAutoIndexer() *MexConfig_AutoIndexer {
	if x != nil {
		return x.AutoIndexer
	}
	return nil
}

func (x *MexConfig) GetIndexing() *MexConfig_Indexing {
	if x != nil {
		return x.Indexing
	}
	return nil
}

func (x *MexConfig) GetLogging() *MexConfig_Logging {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *MexConfig) GetTelemetry() *MexConfig_Telemetry {
	if x != nil {
		return x.Telemetry
	}
	return nil
}

func (x *MexConfig) GetAuth() *MexConfig_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *MexConfig) GetServices() *MexConfig_Services {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *MexConfig) GetStrictness() *MexConfig_Strictness {
	if x != nil {
		return x.Strictness
	}
	return nil
}

func (x *MexConfig) GetNotify() *MexConfig_Notify {
	if x != nil {
		return x.Notify
	}
	return nil
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Build     string `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`
	Desc      string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	BuildDate string `protobuf:"bytes,3,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{1}
}

func (x *Version) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *Version) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Version) GetBuildDate() string {
	if x != nil {
		return x.BuildDate
	}
	return ""
}

type MexConfig_Web struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadTimeout    *durationpb.Duration `protobuf:"bytes,1,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`
	WriteTimeout   *durationpb.Duration `protobuf:"bytes,2,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`
	IdleTimeout    *durationpb.Duration `protobuf:"bytes,3,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	MaxHeaderBytes int32                `protobuf:"varint,4,opt,name=max_header_bytes,json=maxHeaderBytes,proto3" json:"max_header_bytes,omitempty"`
	MaxBodyBytes   int64                `protobuf:"varint,5,opt,name=max_body_bytes,json=maxBodyBytes,proto3" json:"max_body_bytes,omitempty"`
	ApiHost        string               `protobuf:"bytes,6,opt,name=api_host,json=apiHost,proto3" json:"api_host,omitempty"`
	GrpcHost       string               `protobuf:"bytes,8,opt,name=grpc_host,json=grpcHost,proto3" json:"grpc_host,omitempty"`
	// only used my metadata service right now, but this will change to all services
	MetricsPath  string                      `protobuf:"bytes,9,opt,name=metrics_path,json=metricsPath,proto3" json:"metrics_path,omitempty"`
	CaCerts      *MexConfig_Web_CACerts      `protobuf:"bytes,10,opt,name=ca_certs,json=caCerts,proto3" json:"ca_certs,omitempty"`
	IpFilter     *MexConfig_Web_IPFilter     `protobuf:"bytes,12,opt,name=ip_filter,json=ipFilter,proto3" json:"ip_filter,omitempty"`
	RateLimiting *MexConfig_Web_RateLimiting `protobuf:"bytes,13,opt,name=rate_limiting,json=rateLimiting,proto3" json:"rate_limiting,omitempty"`
}

func (x *MexConfig_Web) Reset() {
	*x = MexConfig_Web{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Web) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Web) ProtoMessage() {}

func (x *MexConfig_Web) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Web.ProtoReflect.Descriptor instead.
func (*MexConfig_Web) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MexConfig_Web) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *MexConfig_Web) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *MexConfig_Web) GetIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *MexConfig_Web) GetMaxHeaderBytes() int32 {
	if x != nil {
		return x.MaxHeaderBytes
	}
	return 0
}

func (x *MexConfig_Web) GetMaxBodyBytes() int64 {
	if x != nil {
		return x.MaxBodyBytes
	}
	return 0
}

func (x *MexConfig_Web) GetApiHost() string {
	if x != nil {
		return x.ApiHost
	}
	return ""
}

func (x *MexConfig_Web) GetGrpcHost() string {
	if x != nil {
		return x.GrpcHost
	}
	return ""
}

func (x *MexConfig_Web) GetMetricsPath() string {
	if x != nil {
		return x.MetricsPath
	}
	return ""
}

func (x *MexConfig_Web) GetCaCerts() *MexConfig_Web_CACerts {
	if x != nil {
		return x.CaCerts
	}
	return nil
}

func (x *MexConfig_Web) GetIpFilter() *MexConfig_Web_IPFilter {
	if x != nil {
		return x.IpFilter
	}
	return nil
}

func (x *MexConfig_Web) GetRateLimiting() *MexConfig_Web_RateLimiting {
	if x != nil {
		return x.RateLimiting
	}
	return nil
}

type MexConfig_Postgres struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User               string               `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password           string               `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Hostname           string               `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port               uint32               `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Name               string               `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	SearchPath         []string             `protobuf:"bytes,6,rep,name=search_path,json=searchPath,proto3" json:"search_path,omitempty"`
	SslMode            string               `protobuf:"bytes,7,opt,name=ssl_mode,json=sslMode,proto3" json:"ssl_mode,omitempty"`
	ConnectionAttempts uint32               `protobuf:"varint,8,opt,name=connection_attempts,json=connectionAttempts,proto3" json:"connection_attempts,omitempty"`
	ConnectionPause    *durationpb.Duration `protobuf:"bytes,9,opt,name=connection_pause,json=connectionPause,proto3" json:"connection_pause,omitempty"`
	SlowThreshold      *durationpb.Duration `protobuf:"bytes,10,opt,name=slow_threshold,json=slowThreshold,proto3" json:"slow_threshold,omitempty"`
}

func (x *MexConfig_Postgres) Reset() {
	*x = MexConfig_Postgres{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Postgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Postgres) ProtoMessage() {}

func (x *MexConfig_Postgres) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Postgres.ProtoReflect.Descriptor instead.
func (*MexConfig_Postgres) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MexConfig_Postgres) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MexConfig_Postgres) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MexConfig_Postgres) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *MexConfig_Postgres) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MexConfig_Postgres) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MexConfig_Postgres) GetSearchPath() []string {
	if x != nil {
		return x.SearchPath
	}
	return nil
}

func (x *MexConfig_Postgres) GetSslMode() string {
	if x != nil {
		return x.SslMode
	}
	return ""
}

func (x *MexConfig_Postgres) GetConnectionAttempts() uint32 {
	if x != nil {
		return x.ConnectionAttempts
	}
	return 0
}

func (x *MexConfig_Postgres) GetConnectionPause() *durationpb.Duration {
	if x != nil {
		return x.ConnectionPause
	}
	return nil
}

func (x *MexConfig_Postgres) GetSlowThreshold() *durationpb.Duration {
	if x != nil {
		return x.SlowThreshold
	}
	return nil
}

type MexConfig_Solr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin             string               `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Collection         string               `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	ConfigsetName      string               `protobuf:"bytes,3,opt,name=configset_name,json=configsetName,proto3" json:"configset_name,omitempty"`
	ConnectionAttempts uint32               `protobuf:"varint,4,opt,name=connection_attempts,json=connectionAttempts,proto3" json:"connection_attempts,omitempty"`
	ConnectionPause    *durationpb.Duration `protobuf:"bytes,5,opt,name=connection_pause,json=connectionPause,proto3" json:"connection_pause,omitempty"`
	BasicauthUser      string               `protobuf:"bytes,6,opt,name=basicauth_user,json=basicauthUser,proto3" json:"basicauth_user,omitempty"`
	BasicauthPassword  string               `protobuf:"bytes,7,opt,name=basicauth_password,json=basicauthPassword,proto3" json:"basicauth_password,omitempty"`
	IndexBatchSize     uint32               `protobuf:"varint,8,opt,name=index_batch_size,json=indexBatchSize,proto3" json:"index_batch_size,omitempty"`
	CommitWithin       *durationpb.Duration `protobuf:"bytes,9,opt,name=commit_within,json=commitWithin,proto3" json:"commit_within,omitempty"`
	ReplicationFactor  uint32               `protobuf:"varint,10,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
}

func (x *MexConfig_Solr) Reset() {
	*x = MexConfig_Solr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Solr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Solr) ProtoMessage() {}

func (x *MexConfig_Solr) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Solr.ProtoReflect.Descriptor instead.
func (*MexConfig_Solr) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MexConfig_Solr) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *MexConfig_Solr) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *MexConfig_Solr) GetConfigsetName() string {
	if x != nil {
		return x.ConfigsetName
	}
	return ""
}

func (x *MexConfig_Solr) GetConnectionAttempts() uint32 {
	if x != nil {
		return x.ConnectionAttempts
	}
	return 0
}

func (x *MexConfig_Solr) GetConnectionPause() *durationpb.Duration {
	if x != nil {
		return x.ConnectionPause
	}
	return nil
}

func (x *MexConfig_Solr) GetBasicauthUser() string {
	if x != nil {
		return x.BasicauthUser
	}
	return ""
}

func (x *MexConfig_Solr) GetBasicauthPassword() string {
	if x != nil {
		return x.BasicauthPassword
	}
	return ""
}

func (x *MexConfig_Solr) GetIndexBatchSize() uint32 {
	if x != nil {
		return x.IndexBatchSize
	}
	return 0
}

func (x *MexConfig_Solr) GetCommitWithin() *durationpb.Duration {
	if x != nil {
		return x.CommitWithin
	}
	return nil
}

func (x *MexConfig_Solr) GetReplicationFactor() uint32 {
	if x != nil {
		return x.ReplicationFactor
	}
	return 0
}

type MexConfig_Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname            string               `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port                uint32               `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Password            string               `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Db                  uint32               `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty"`
	ConnectionAttempts  uint32               `protobuf:"varint,5,opt,name=connection_attempts,json=connectionAttempts,proto3" json:"connection_attempts,omitempty"`
	ConnectionPause     *durationpb.Duration `protobuf:"bytes,6,opt,name=connection_pause,json=connectionPause,proto3" json:"connection_pause,omitempty"`
	ShutdownGracePeriod *durationpb.Duration `protobuf:"bytes,7,opt,name=shutdown_grace_period,json=shutdownGracePeriod,proto3" json:"shutdown_grace_period,omitempty"`
	UseTls              bool                 `protobuf:"varint,8,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
	PubSubPrefix        string               `protobuf:"bytes,9,opt,name=pub_sub_prefix,json=pubSubPrefix,proto3" json:"pub_sub_prefix,omitempty"`
}

func (x *MexConfig_Redis) Reset() {
	*x = MexConfig_Redis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Redis) ProtoMessage() {}

func (x *MexConfig_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Redis.ProtoReflect.Descriptor instead.
func (*MexConfig_Redis) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MexConfig_Redis) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *MexConfig_Redis) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MexConfig_Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MexConfig_Redis) GetDb() uint32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *MexConfig_Redis) GetConnectionAttempts() uint32 {
	if x != nil {
		return x.ConnectionAttempts
	}
	return 0
}

func (x *MexConfig_Redis) GetConnectionPause() *durationpb.Duration {
	if x != nil {
		return x.ConnectionPause
	}
	return nil
}

func (x *MexConfig_Redis) GetShutdownGracePeriod() *durationpb.Duration {
	if x != nil {
		return x.ShutdownGracePeriod
	}
	return nil
}

func (x *MexConfig_Redis) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

func (x *MexConfig_Redis) GetPubSubPrefix() string {
	if x != nil {
		return x.PubSubPrefix
	}
	return ""
}

type MexConfig_OAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId                    string                  `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ProducerGroupId             string                  `protobuf:"bytes,2,opt,name=producer_group_id,json=producerGroupId,proto3" json:"producer_group_id,omitempty"`
	ConsumerGroupId             string                  `protobuf:"bytes,3,opt,name=consumer_group_id,json=consumerGroupId,proto3" json:"consumer_group_id,omitempty"`
	InternalAuthServiceHostname string                  `protobuf:"bytes,4,opt,name=internal_auth_service_hostname,json=internalAuthServiceHostname,proto3" json:"internal_auth_service_hostname,omitempty"`
	Server                      *MexConfig_OAuth_Server `protobuf:"bytes,5,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *MexConfig_OAuth) Reset() {
	*x = MexConfig_OAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_OAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_OAuth) ProtoMessage() {}

func (x *MexConfig_OAuth) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_OAuth.ProtoReflect.Descriptor instead.
func (*MexConfig_OAuth) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 4}
}

func (x *MexConfig_OAuth) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MexConfig_OAuth) GetProducerGroupId() string {
	if x != nil {
		return x.ProducerGroupId
	}
	return ""
}

func (x *MexConfig_OAuth) GetConsumerGroupId() string {
	if x != nil {
		return x.ConsumerGroupId
	}
	return ""
}

func (x *MexConfig_OAuth) GetInternalAuthServiceHostname() string {
	if x != nil {
		return x.InternalAuthServiceHostname
	}
	return ""
}

func (x *MexConfig_OAuth) GetServer() *MexConfig_OAuth_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type MexConfig_Codings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleUri string `protobuf:"bytes,1,opt,name=bundle_uri,json=bundleUri,proto3" json:"bundle_uri,omitempty"`
}

func (x *MexConfig_Codings) Reset() {
	*x = MexConfig_Codings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Codings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Codings) ProtoMessage() {}

func (x *MexConfig_Codings) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Codings.ProtoReflect.Descriptor instead.
func (*MexConfig_Codings) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 5}
}

func (x *MexConfig_Codings) GetBundleUri() string {
	if x != nil {
		return x.BundleUri
	}
	return ""
}

type MexConfig_EntityTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoType RepoType `protobuf:"varint,1,opt,name=repo_type,json=repoType,proto3,enum=d4l.mex.cfg.RepoType" json:"repo_type,omitempty"`
}

func (x *MexConfig_EntityTypes) Reset() {
	*x = MexConfig_EntityTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_EntityTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_EntityTypes) ProtoMessage() {}

func (x *MexConfig_EntityTypes) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_EntityTypes.ProtoReflect.Descriptor instead.
func (*MexConfig_EntityTypes) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 6}
}

func (x *MexConfig_EntityTypes) GetRepoType() RepoType {
	if x != nil {
		return x.RepoType
	}
	return RepoType_DIRECT
}

type MexConfig_FieldDefs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoType RepoType `protobuf:"varint,1,opt,name=repo_type,json=repoType,proto3,enum=d4l.mex.cfg.RepoType" json:"repo_type,omitempty"`
}

func (x *MexConfig_FieldDefs) Reset() {
	*x = MexConfig_FieldDefs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_FieldDefs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_FieldDefs) ProtoMessage() {}

func (x *MexConfig_FieldDefs) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_FieldDefs.ProtoReflect.Descriptor instead.
func (*MexConfig_FieldDefs) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 7}
}

func (x *MexConfig_FieldDefs) GetRepoType() RepoType {
	if x != nil {
		return x.RepoType
	}
	return RepoType_DIRECT
}

type MexConfig_SearchConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoType RepoType `protobuf:"varint,1,opt,name=repo_type,json=repoType,proto3,enum=d4l.mex.cfg.RepoType" json:"repo_type,omitempty"`
}

func (x *MexConfig_SearchConfig) Reset() {
	*x = MexConfig_SearchConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_SearchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_SearchConfig) ProtoMessage() {}

func (x *MexConfig_SearchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_SearchConfig.ProtoReflect.Descriptor instead.
func (*MexConfig_SearchConfig) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 8}
}

func (x *MexConfig_SearchConfig) GetRepoType() RepoType {
	if x != nil {
		return x.RepoType
	}
	return RepoType_DIRECT
}

type MexConfig_Jwks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteKeysUri      string               `protobuf:"bytes,1,opt,name=remote_keys_uri,json=remoteKeysUri,proto3" json:"remote_keys_uri,omitempty"`
	ConnectionAttempts uint32               `protobuf:"varint,2,opt,name=connection_attempts,json=connectionAttempts,proto3" json:"connection_attempts,omitempty"`
	ConnectionPause    *durationpb.Duration `protobuf:"bytes,3,opt,name=connection_pause,json=connectionPause,proto3" json:"connection_pause,omitempty"`
}

func (x *MexConfig_Jwks) Reset() {
	*x = MexConfig_Jwks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Jwks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Jwks) ProtoMessage() {}

func (x *MexConfig_Jwks) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Jwks.ProtoReflect.Descriptor instead.
func (*MexConfig_Jwks) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 9}
}

func (x *MexConfig_Jwks) GetRemoteKeysUri() string {
	if x != nil {
		return x.RemoteKeysUri
	}
	return ""
}

func (x *MexConfig_Jwks) GetConnectionAttempts() uint32 {
	if x != nil {
		return x.ConnectionAttempts
	}
	return 0
}

func (x *MexConfig_Jwks) GetConnectionPause() *durationpb.Duration {
	if x != nil {
		return x.ConnectionPause
	}
	return nil
}

type MexConfig_Jobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expiration *durationpb.Duration `protobuf:"bytes,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *MexConfig_Jobs) Reset() {
	*x = MexConfig_Jobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Jobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Jobs) ProtoMessage() {}

func (x *MexConfig_Jobs) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Jobs.ProtoReflect.Descriptor instead.
func (*MexConfig_Jobs) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 10}
}

func (x *MexConfig_Jobs) GetExpiration() *durationpb.Duration {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type MexConfig_AutoIndexer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetExpiration *durationpb.Duration `protobuf:"bytes,1,opt,name=set_expiration,json=setExpiration,proto3" json:"set_expiration,omitempty"`
}

func (x *MexConfig_AutoIndexer) Reset() {
	*x = MexConfig_AutoIndexer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_AutoIndexer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_AutoIndexer) ProtoMessage() {}

func (x *MexConfig_AutoIndexer) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_AutoIndexer.ProtoReflect.Descriptor instead.
func (*MexConfig_AutoIndexer) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 11}
}

func (x *MexConfig_AutoIndexer) GetSetExpiration() *durationpb.Duration {
	if x != nil {
		return x.SetExpiration
	}
	return nil
}

type MexConfig_Indexing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DuplicationDetectionAlgorithm DuplicateDetectionAlgorithm `protobuf:"varint,1,opt,name=duplication_detection_algorithm,json=duplicationDetectionAlgorithm,proto3,enum=d4l.mex.cfg.DuplicateDetectionAlgorithm" json:"duplication_detection_algorithm,omitempty"`
}

func (x *MexConfig_Indexing) Reset() {
	*x = MexConfig_Indexing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Indexing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Indexing) ProtoMessage() {}

func (x *MexConfig_Indexing) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Indexing.ProtoReflect.Descriptor instead.
func (*MexConfig_Indexing) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 12}
}

func (x *MexConfig_Indexing) GetDuplicationDetectionAlgorithm() DuplicateDetectionAlgorithm {
	if x != nil {
		return x.DuplicationDetectionAlgorithm
	}
	return DuplicateDetectionAlgorithm_SIMPLE
}

type MexConfig_Logging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevelGrpc         string   `protobuf:"bytes,1,opt,name=log_level_grpc,json=logLevelGrpc,proto3" json:"log_level_grpc,omitempty"`
	RedactPersonalFields bool     `protobuf:"varint,2,opt,name=redact_personal_fields,json=redactPersonalFields,proto3" json:"redact_personal_fields,omitempty"`
	RedactQueryParams    []string `protobuf:"bytes,3,rep,name=redact_query_params,json=redactQueryParams,proto3" json:"redact_query_params,omitempty"`
	TraceEnabled         bool     `protobuf:"varint,4,opt,name=trace_enabled,json=traceEnabled,proto3" json:"trace_enabled,omitempty"`
	TraceSecret          string   `protobuf:"bytes,5,opt,name=trace_secret,json=traceSecret,proto3" json:"trace_secret,omitempty"`
}

func (x *MexConfig_Logging) Reset() {
	*x = MexConfig_Logging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Logging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Logging) ProtoMessage() {}

func (x *MexConfig_Logging) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Logging.ProtoReflect.Descriptor instead.
func (*MexConfig_Logging) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 13}
}

func (x *MexConfig_Logging) GetLogLevelGrpc() string {
	if x != nil {
		return x.LogLevelGrpc
	}
	return ""
}

func (x *MexConfig_Logging) GetRedactPersonalFields() bool {
	if x != nil {
		return x.RedactPersonalFields
	}
	return false
}

func (x *MexConfig_Logging) GetRedactQueryParams() []string {
	if x != nil {
		return x.RedactQueryParams
	}
	return nil
}

func (x *MexConfig_Logging) GetTraceEnabled() bool {
	if x != nil {
		return x.TraceEnabled
	}
	return false
}

func (x *MexConfig_Logging) GetTraceSecret() string {
	if x != nil {
		return x.TraceSecret
	}
	return ""
}

type MexConfig_Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingerUpdateInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=pinger_update_interval,json=pingerUpdateInterval,proto3" json:"pinger_update_interval,omitempty"`
	StatusUpdateInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=status_update_interval,json=statusUpdateInterval,proto3" json:"status_update_interval,omitempty"`
}

func (x *MexConfig_Telemetry) Reset() {
	*x = MexConfig_Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Telemetry) ProtoMessage() {}

func (x *MexConfig_Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Telemetry.ProtoReflect.Descriptor instead.
func (*MexConfig_Telemetry) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 14}
}

func (x *MexConfig_Telemetry) GetPingerUpdateInterval() *durationpb.Duration {
	if x != nil {
		return x.PingerUpdateInterval
	}
	return nil
}

func (x *MexConfig_Telemetry) GetStatusUpdateInterval() *durationpb.Duration {
	if x != nil {
		return x.StatusUpdateInterval
	}
	return nil
}

type MexConfig_Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKeysRoles []byte `protobuf:"bytes,1,opt,name=api_keys_roles,json=apiKeysRoles,proto3" json:"api_keys_roles,omitempty"`
}

func (x *MexConfig_Auth) Reset() {
	*x = MexConfig_Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Auth) ProtoMessage() {}

func (x *MexConfig_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Auth.ProtoReflect.Descriptor instead.
func (*MexConfig_Auth) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 15}
}

func (x *MexConfig_Auth) GetApiKeysRoles() []byte {
	if x != nil {
		return x.ApiKeysRoles
	}
	return nil
}

type MexConfig_Strictness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search            *MexConfig_Strictness_Search            `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	StrictJsonParsing *MexConfig_Strictness_StrictJSONParsing `protobuf:"bytes,2,opt,name=strict_json_parsing,json=strictJsonParsing,proto3" json:"strict_json_parsing,omitempty"`
}

func (x *MexConfig_Strictness) Reset() {
	*x = MexConfig_Strictness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Strictness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Strictness) ProtoMessage() {}

func (x *MexConfig_Strictness) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Strictness.ProtoReflect.Descriptor instead.
func (*MexConfig_Strictness) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 16}
}

func (x *MexConfig_Strictness) GetSearch() *MexConfig_Strictness_Search {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *MexConfig_Strictness) GetStrictJsonParsing() *MexConfig_Strictness_StrictJSONParsing {
	if x != nil {
		return x.StrictJsonParsing
	}
	return nil
}

type MexConfig_Notify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailerType EmailerType                  `protobuf:"varint,3,opt,name=emailer_type,json=emailerType,proto3,enum=d4l.mex.cfg.EmailerType" json:"emailer_type,omitempty"`
	Flowmailer  *MexConfig_Notify_Flowmailer `protobuf:"bytes,4,opt,name=flowmailer,proto3" json:"flowmailer,omitempty"`
}

func (x *MexConfig_Notify) Reset() {
	*x = MexConfig_Notify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Notify) ProtoMessage() {}

func (x *MexConfig_Notify) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Notify.ProtoReflect.Descriptor instead.
func (*MexConfig_Notify) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 17}
}

func (x *MexConfig_Notify) GetEmailerType() EmailerType {
	if x != nil {
		return x.EmailerType
	}
	return EmailerType_MOCKMAILER
}

func (x *MexConfig_Notify) GetFlowmailer() *MexConfig_Notify_Flowmailer {
	if x != nil {
		return x.Flowmailer
	}
	return nil
}

type MexConfig_Services struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BiEventsFilter *MexConfig_Services_BIEventsFilter `protobuf:"bytes,1,opt,name=bi_events_filter,json=biEventsFilter,proto3" json:"bi_events_filter,omitempty"`
	Blobs          *MexConfig_Services_Blobs          `protobuf:"bytes,2,opt,name=blobs,proto3" json:"blobs,omitempty"`
	Config         *MexConfig_Services_Config         `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *MexConfig_Services) Reset() {
	*x = MexConfig_Services{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Services) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Services) ProtoMessage() {}

func (x *MexConfig_Services) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Services.ProtoReflect.Descriptor instead.
func (*MexConfig_Services) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 18}
}

func (x *MexConfig_Services) GetBiEventsFilter() *MexConfig_Services_BIEventsFilter {
	if x != nil {
		return x.BiEventsFilter
	}
	return nil
}

func (x *MexConfig_Services) GetBlobs() *MexConfig_Services_Blobs {
	if x != nil {
		return x.Blobs
	}
	return nil
}

func (x *MexConfig_Services) GetConfig() *MexConfig_Services_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type MexConfig_Web_CACerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalCaCertsFiles []string             `protobuf:"bytes,10,rep,name=additional_ca_certs_files,json=additionalCaCertsFiles,proto3" json:"additional_ca_certs_files,omitempty"`
	AdditionalCaCertsPem   []byte               `protobuf:"bytes,11,opt,name=additional_ca_certs_pem,json=additionalCaCertsPem,proto3" json:"additional_ca_certs_pem,omitempty"`
	AccessAttempts         uint32               `protobuf:"varint,2,opt,name=access_attempts,json=accessAttempts,proto3" json:"access_attempts,omitempty"`
	AccessPause            *durationpb.Duration `protobuf:"bytes,3,opt,name=access_pause,json=accessPause,proto3" json:"access_pause,omitempty"`
}

func (x *MexConfig_Web_CACerts) Reset() {
	*x = MexConfig_Web_CACerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Web_CACerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Web_CACerts) ProtoMessage() {}

func (x *MexConfig_Web_CACerts) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Web_CACerts.ProtoReflect.Descriptor instead.
func (*MexConfig_Web_CACerts) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *MexConfig_Web_CACerts) GetAdditionalCaCertsFiles() []string {
	if x != nil {
		return x.AdditionalCaCertsFiles
	}
	return nil
}

func (x *MexConfig_Web_CACerts) GetAdditionalCaCertsPem() []byte {
	if x != nil {
		return x.AdditionalCaCertsPem
	}
	return nil
}

func (x *MexConfig_Web_CACerts) GetAccessAttempts() uint32 {
	if x != nil {
		return x.AccessAttempts
	}
	return 0
}

func (x *MexConfig_Web_CACerts) GetAccessPause() *durationpb.Duration {
	if x != nil {
		return x.AccessPause
	}
	return nil
}

type MexConfig_Web_IPFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AllowedIps []string `protobuf:"bytes,2,rep,name=allowed_ips,json=allowedIps,proto3" json:"allowed_ips,omitempty"`
}

func (x *MexConfig_Web_IPFilter) Reset() {
	*x = MexConfig_Web_IPFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Web_IPFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Web_IPFilter) ProtoMessage() {}

func (x *MexConfig_Web_IPFilter) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Web_IPFilter.ProtoReflect.Descriptor instead.
func (*MexConfig_Web_IPFilter) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *MexConfig_Web_IPFilter) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MexConfig_Web_IPFilter) GetAllowedIps() []string {
	if x != nil {
		return x.AllowedIps
	}
	return nil
}

type MexConfig_Web_RateLimiting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled        bool                 `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Period         *durationpb.Duration `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	Limit          int64                `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	ClientIpHeader string               `protobuf:"bytes,4,opt,name=client_ip_header,json=clientIpHeader,proto3" json:"client_ip_header,omitempty"`
}

func (x *MexConfig_Web_RateLimiting) Reset() {
	*x = MexConfig_Web_RateLimiting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Web_RateLimiting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Web_RateLimiting) ProtoMessage() {}

func (x *MexConfig_Web_RateLimiting) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Web_RateLimiting.ProtoReflect.Descriptor instead.
func (*MexConfig_Web_RateLimiting) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *MexConfig_Web_RateLimiting) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MexConfig_Web_RateLimiting) GetPeriod() *durationpb.Duration {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *MexConfig_Web_RateLimiting) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MexConfig_Web_RateLimiting) GetClientIpHeader() string {
	if x != nil {
		return x.ClientIpHeader
	}
	return ""
}

type MexConfig_OAuth_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled               bool                 `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ClientSecrets         []string             `protobuf:"bytes,2,rep,name=client_secrets,json=clientSecrets,proto3" json:"client_secrets,omitempty"`
	RedirectUris          []string             `protobuf:"bytes,3,rep,name=redirect_uris,json=redirectUris,proto3" json:"redirect_uris,omitempty"`
	GrantFlows            []string             `protobuf:"bytes,4,rep,name=grant_flows,json=grantFlows,proto3" json:"grant_flows,omitempty"`
	SigningPrivateKeyFile string               `protobuf:"bytes,5,opt,name=signing_private_key_file,json=signingPrivateKeyFile,proto3" json:"signing_private_key_file,omitempty"`
	KeyFileAccessAttempts uint32               `protobuf:"varint,6,opt,name=key_file_access_attempts,json=keyFileAccessAttempts,proto3" json:"key_file_access_attempts,omitempty"`
	KeyFileAccessPause    *durationpb.Duration `protobuf:"bytes,7,opt,name=key_file_access_pause,json=keyFileAccessPause,proto3" json:"key_file_access_pause,omitempty"`
	SigningPrivateKeyPem  []byte               `protobuf:"bytes,8,opt,name=signing_private_key_pem,json=signingPrivateKeyPem,proto3" json:"signing_private_key_pem,omitempty"`
	SignatureAlg          string               `protobuf:"bytes,9,opt,name=signature_alg,json=signatureAlg,proto3" json:"signature_alg,omitempty"`
	AuthCodeValidity      *durationpb.Duration `protobuf:"bytes,10,opt,name=auth_code_validity,json=authCodeValidity,proto3" json:"auth_code_validity,omitempty"`
	AccessTokenValidity   *durationpb.Duration `protobuf:"bytes,11,opt,name=access_token_validity,json=accessTokenValidity,proto3" json:"access_token_validity,omitempty"`
	RefreshTokenValidity  *durationpb.Duration `protobuf:"bytes,12,opt,name=refresh_token_validity,json=refreshTokenValidity,proto3" json:"refresh_token_validity,omitempty"`
}

func (x *MexConfig_OAuth_Server) Reset() {
	*x = MexConfig_OAuth_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_OAuth_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_OAuth_Server) ProtoMessage() {}

func (x *MexConfig_OAuth_Server) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_OAuth_Server.ProtoReflect.Descriptor instead.
func (*MexConfig_OAuth_Server) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *MexConfig_OAuth_Server) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MexConfig_OAuth_Server) GetClientSecrets() []string {
	if x != nil {
		return x.ClientSecrets
	}
	return nil
}

func (x *MexConfig_OAuth_Server) GetRedirectUris() []string {
	if x != nil {
		return x.RedirectUris
	}
	return nil
}

func (x *MexConfig_OAuth_Server) GetGrantFlows() []string {
	if x != nil {
		return x.GrantFlows
	}
	return nil
}

func (x *MexConfig_OAuth_Server) GetSigningPrivateKeyFile() string {
	if x != nil {
		return x.SigningPrivateKeyFile
	}
	return ""
}

func (x *MexConfig_OAuth_Server) GetKeyFileAccessAttempts() uint32 {
	if x != nil {
		return x.KeyFileAccessAttempts
	}
	return 0
}

func (x *MexConfig_OAuth_Server) GetKeyFileAccessPause() *durationpb.Duration {
	if x != nil {
		return x.KeyFileAccessPause
	}
	return nil
}

func (x *MexConfig_OAuth_Server) GetSigningPrivateKeyPem() []byte {
	if x != nil {
		return x.SigningPrivateKeyPem
	}
	return nil
}

func (x *MexConfig_OAuth_Server) GetSignatureAlg() string {
	if x != nil {
		return x.SignatureAlg
	}
	return ""
}

func (x *MexConfig_OAuth_Server) GetAuthCodeValidity() *durationpb.Duration {
	if x != nil {
		return x.AuthCodeValidity
	}
	return nil
}

func (x *MexConfig_OAuth_Server) GetAccessTokenValidity() *durationpb.Duration {
	if x != nil {
		return x.AccessTokenValidity
	}
	return nil
}

func (x *MexConfig_OAuth_Server) GetRefreshTokenValidity() *durationpb.Duration {
	if x != nil {
		return x.RefreshTokenValidity
	}
	return nil
}

type MexConfig_Strictness_Search struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToleratePartialFailures bool `protobuf:"varint,1,opt,name=tolerate_partial_failures,json=toleratePartialFailures,proto3" json:"tolerate_partial_failures,omitempty"`
}

func (x *MexConfig_Strictness_Search) Reset() {
	*x = MexConfig_Strictness_Search{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Strictness_Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Strictness_Search) ProtoMessage() {}

func (x *MexConfig_Strictness_Search) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Strictness_Search.ProtoReflect.Descriptor instead.
func (*MexConfig_Strictness_Search) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 16, 0}
}

func (x *MexConfig_Strictness_Search) GetToleratePartialFailures() bool {
	if x != nil {
		return x.ToleratePartialFailures
	}
	return false
}

type MexConfig_Strictness_StrictJSONParsing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     bool `protobuf:"varint,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Config   bool `protobuf:"varint,2,opt,name=config,proto3" json:"config,omitempty"`
	Index    bool `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Metadata bool `protobuf:"varint,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Query    bool `protobuf:"varint,5,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *MexConfig_Strictness_StrictJSONParsing) Reset() {
	*x = MexConfig_Strictness_StrictJSONParsing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Strictness_StrictJSONParsing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Strictness_StrictJSONParsing) ProtoMessage() {}

func (x *MexConfig_Strictness_StrictJSONParsing) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Strictness_StrictJSONParsing.ProtoReflect.Descriptor instead.
func (*MexConfig_Strictness_StrictJSONParsing) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 16, 1}
}

func (x *MexConfig_Strictness_StrictJSONParsing) GetAuth() bool {
	if x != nil {
		return x.Auth
	}
	return false
}

func (x *MexConfig_Strictness_StrictJSONParsing) GetConfig() bool {
	if x != nil {
		return x.Config
	}
	return false
}

func (x *MexConfig_Strictness_StrictJSONParsing) GetIndex() bool {
	if x != nil {
		return x.Index
	}
	return false
}

func (x *MexConfig_Strictness_StrictJSONParsing) GetMetadata() bool {
	if x != nil {
		return x.Metadata
	}
	return false
}

func (x *MexConfig_Strictness_StrictJSONParsing) GetQuery() bool {
	if x != nil {
		return x.Query
	}
	return false
}

type MexConfig_Notify_Flowmailer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginOauth         string `protobuf:"bytes,1,opt,name=origin_oauth,json=originOauth,proto3" json:"origin_oauth,omitempty"`
	OriginApi           string `protobuf:"bytes,2,opt,name=origin_api,json=originApi,proto3" json:"origin_api,omitempty"`
	ClientId            string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret        string `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	AccountId           string `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	NoreplyEmailAddress string `protobuf:"bytes,6,opt,name=noreply_email_address,json=noreplyEmailAddress,proto3" json:"noreply_email_address,omitempty"`
}

func (x *MexConfig_Notify_Flowmailer) Reset() {
	*x = MexConfig_Notify_Flowmailer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Notify_Flowmailer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Notify_Flowmailer) ProtoMessage() {}

func (x *MexConfig_Notify_Flowmailer) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Notify_Flowmailer.ProtoReflect.Descriptor instead.
func (*MexConfig_Notify_Flowmailer) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 17, 0}
}

func (x *MexConfig_Notify_Flowmailer) GetOriginOauth() string {
	if x != nil {
		return x.OriginOauth
	}
	return ""
}

func (x *MexConfig_Notify_Flowmailer) GetOriginApi() string {
	if x != nil {
		return x.OriginApi
	}
	return ""
}

func (x *MexConfig_Notify_Flowmailer) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MexConfig_Notify_Flowmailer) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *MexConfig_Notify_Flowmailer) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *MexConfig_Notify_Flowmailer) GetNoreplyEmailAddress() string {
	if x != nil {
		return x.NoreplyEmailAddress
	}
	return ""
}

type MexConfig_Services_BIEventsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Secret string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *MexConfig_Services_BIEventsFilter) Reset() {
	*x = MexConfig_Services_BIEventsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Services_BIEventsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Services_BIEventsFilter) ProtoMessage() {}

func (x *MexConfig_Services_BIEventsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Services_BIEventsFilter.ProtoReflect.Descriptor instead.
func (*MexConfig_Services_BIEventsFilter) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 18, 0}
}

func (x *MexConfig_Services_BIEventsFilter) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *MexConfig_Services_BIEventsFilter) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MexConfig_Services_BIEventsFilter) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type MexConfig_Services_Blobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterTableName string `protobuf:"bytes,1,opt,name=master_table_name,json=masterTableName,proto3" json:"master_table_name,omitempty"`
}

func (x *MexConfig_Services_Blobs) Reset() {
	*x = MexConfig_Services_Blobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Services_Blobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Services_Blobs) ProtoMessage() {}

func (x *MexConfig_Services_Blobs) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Services_Blobs.ProtoReflect.Descriptor instead.
func (*MexConfig_Services_Blobs) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 18, 1}
}

func (x *MexConfig_Services_Blobs) GetMasterTableName() string {
	if x != nil {
		return x.MasterTableName
	}
	return ""
}

type MexConfig_Services_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin        string                            `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	EnvPath       string                            `protobuf:"bytes,2,opt,name=env_path,json=envPath,proto3" json:"env_path,omitempty"`
	ApiKeys       []string                          `protobuf:"bytes,3,rep,name=api_keys,json=apiKeys,proto3" json:"api_keys,omitempty"`
	Github        *MexConfig_Services_Config_Github `protobuf:"bytes,5,opt,name=github,proto3" json:"github,omitempty"`
	UpdateTimeout *durationpb.Duration              `protobuf:"bytes,6,opt,name=update_timeout,json=updateTimeout,proto3" json:"update_timeout,omitempty"`
}

func (x *MexConfig_Services_Config) Reset() {
	*x = MexConfig_Services_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Services_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Services_Config) ProtoMessage() {}

func (x *MexConfig_Services_Config) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Services_Config.ProtoReflect.Descriptor instead.
func (*MexConfig_Services_Config) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 18, 2}
}

func (x *MexConfig_Services_Config) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *MexConfig_Services_Config) GetEnvPath() string {
	if x != nil {
		return x.EnvPath
	}
	return ""
}

func (x *MexConfig_Services_Config) GetApiKeys() []string {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

func (x *MexConfig_Services_Config) GetGithub() *MexConfig_Services_Config_Github {
	if x != nil {
		return x.Github
	}
	return nil
}

func (x *MexConfig_Services_Config) GetUpdateTimeout() *durationpb.Duration {
	if x != nil {
		return x.UpdateTimeout
	}
	return nil
}

type MexConfig_Services_Config_Github struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoName          string `protobuf:"bytes,1,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	DefaultBranchName string `protobuf:"bytes,2,opt,name=default_branch_name,json=defaultBranchName,proto3" json:"default_branch_name,omitempty"`
	DeployKeyPem      []byte `protobuf:"bytes,3,opt,name=deploy_key_pem,json=deployKeyPem,proto3" json:"deploy_key_pem,omitempty"`
}

func (x *MexConfig_Services_Config_Github) Reset() {
	*x = MexConfig_Services_Config_Github{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_cfg_mexcfg_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MexConfig_Services_Config_Github) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MexConfig_Services_Config_Github) ProtoMessage() {}

func (x *MexConfig_Services_Config_Github) ProtoReflect() protoreflect.Message {
	mi := &file_shared_cfg_mexcfg_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MexConfig_Services_Config_Github.ProtoReflect.Descriptor instead.
func (*MexConfig_Services_Config_Github) Descriptor() ([]byte, []int) {
	return file_shared_cfg_mexcfg_proto_rawDescGZIP(), []int{0, 18, 2, 0}
}

func (x *MexConfig_Services_Config_Github) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *MexConfig_Services_Config_Github) GetDefaultBranchName() string {
	if x != nil {
		return x.DefaultBranchName
	}
	return ""
}

func (x *MexConfig_Services_Config_Github) GetDeployKeyPem() []byte {
	if x != nil {
		return x.DeployKeyPem
	}
	return nil
}

var File_shared_cfg_mexcfg_proto protoreflect.FileDescriptor

var file_shared_cfg_mexcfg_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x66, 0x67, 0x2f, 0x6d, 0x65, 0x78,
	0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x64, 0x34, 0x6c, 0x2e, 0x6d,
	0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x1a, 0x10, 0x64, 0x34, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x54, 0x0a, 0x09, 0x4d, 0x65, 0x78,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65,
	0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x92, 0xe2, 0x09, 0x01, 0x2a,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x03, 0x77, 0x65,
	0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65,
	0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x57, 0x65, 0x62, 0x52, 0x03, 0x77, 0x65, 0x62, 0x12, 0x2f, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63,
	0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x52, 0x02, 0x64, 0x62, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x6f, 0x6c,
	0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65,
	0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x6f, 0x6c, 0x72, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x34, 0x6c, 0x2e,
	0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0x32,
	0x0a, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x05, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66,
	0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0c,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67,
	0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x66,
	0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65,
	0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x73, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x65, 0x66, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x34,
	0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f,
	0x0a, 0x04, 0x6a, 0x77, 0x6b, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4a, 0x77, 0x6b, 0x73, 0x52, 0x04, 0x6a, 0x77, 0x6b, 0x73, 0x12,
	0x2f, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73,
	0x12, 0x45, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78,
	0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x69, 0x6e, 0x67, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x34, 0x6c,
	0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65,
	0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x3f, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x96, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63,
	0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d,
	0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78,
	0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78,
	0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18,
	0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78,
	0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a, 0x89, 0x12,
	0x0a, 0x03, 0x57, 0x65, 0x62, 0x12, 0xbc, 0x01, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x7e, 0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x35,
	0x73, 0x8a, 0xe2, 0x09, 0x72, 0x0a, 0x19, 0x48, 0x54, 0x54, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x55, 0x54, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0xb5, 0x01, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x35,
	0x73, 0x8a, 0xe2, 0x09, 0x69, 0x0a, 0x1a, 0x48, 0x54, 0x54, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x4b, 0x54, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0xca, 0x01, 0x0a,
	0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x8b,
	0x01, 0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x35, 0x73, 0x8a, 0xe2, 0x09, 0x7f, 0x0a, 0x19, 0x48,
	0x54, 0x54, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x64, 0x6c, 0x65,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x62, 0x54, 0x68, 0x69, 0x73, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x61, 0x69, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x0b, 0x69, 0x64,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0d, 0x82, 0xe2, 0x09, 0x09, 0x0a, 0x07, 0x32, 0x30, 0x39, 0x37, 0x31,
	0x35, 0x32, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0d, 0x82, 0xe2, 0x09, 0x09,
	0x0a, 0x07, 0x32, 0x30, 0x39, 0x37, 0x31, 0x35, 0x32, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x6f,
	0x64, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x82, 0xe2, 0x09, 0x0e, 0x0a,
	0x0c, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x3a, 0x33, 0x30, 0x30, 0x30, 0x8a, 0xe2, 0x09,
	0x2c, 0x12, 0x2a, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x6f, 0x72, 0x74,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x61,
	0x70, 0x69, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x81, 0x01, 0x82, 0xe2, 0x09,
	0x0e, 0x0a, 0x0c, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x3a, 0x39, 0x30, 0x30, 0x30, 0x8a,
	0xe2, 0x09, 0x6b, 0x12, 0x69, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x6f,
	0x72, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x52, 0x50, 0x43, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x77, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x20, 0x76, 0x69, 0x61, 0x20, 0x61, 0x6e, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2d, 0x67, 0x52,
	0x50, 0x43, 0x20, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x20, 0x60, 0x57, 0x65, 0x62, 0x2e, 0x41, 0x50, 0x49, 0x48, 0x6f, 0x73, 0x74, 0x60, 0x52, 0x08,
	0x67, 0x72, 0x70, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0x82, 0xe2, 0x09, 0x0a, 0x0a, 0x08, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x08, 0x63,
	0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x2e, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x52, 0x07, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x69, 0x70,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x2e, 0x49, 0x50, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x08, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0d,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66,
	0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x72, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x87, 0x06, 0x0a, 0x07, 0x43,
	0x41, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0xea, 0x02, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0xae, 0x02, 0x82, 0xe2, 0x09,
	0x05, 0x0a, 0x03, 0xe2, 0x88, 0x85, 0x8a, 0xe2, 0x09, 0xa0, 0x02, 0x12, 0x58, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x43, 0x41, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x64, 0x65, 0x72, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20,
	0x48, 0x54, 0x54, 0x50, 0x53, 0x20, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x54,
	0x4c, 0x53, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x67, 0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x50, 0x45, 0x4d, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x20, 0x50, 0x45, 0x4d, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x1a, 0x5b,
	0x41, 0x6c, 0x6c, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x50, 0x45, 0x4d,
	0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x6e,
	0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x54, 0x4c, 0x53, 0x2e, 0x52, 0x16, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x8c, 0x02, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x6d, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0c, 0x42, 0xd4, 0x01, 0x82, 0xe2, 0x09, 0x02, 0x10, 0x01, 0x8a, 0xe2,
	0x09, 0xc9, 0x01, 0x12, 0x2f, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x50, 0x45, 0x4d, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x1a, 0x44, 0x54, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x20, 0x50, 0x45, 0x4d, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x1a, 0x50, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x20, 0x50, 0x45, 0x4d, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x6f, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62,
	0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x52, 0x14, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x50,
	0x65, 0x6d, 0x12, 0x31, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0x82, 0xe2, 0x09,
	0x04, 0x0a, 0x02, 0x32, 0x30, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x32, 0x73,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x3a, 0x05, 0x9a,
	0xe2, 0x09, 0x01, 0x2a, 0x1a, 0x64, 0x0a, 0x08, 0x49, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x0b, 0x82, 0xe2, 0x09, 0x07, 0x0a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x09, 0x82, 0xe2,
	0x09, 0x05, 0x0a, 0x03, 0xe2, 0x88, 0x85, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x49, 0x70, 0x73, 0x3a, 0x05, 0x9a, 0xe2, 0x09, 0x01, 0x2a, 0x1a, 0xd5, 0x01, 0x0a, 0x0c, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x82, 0xe2,
	0x09, 0x07, 0x0a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x82,
	0xe2, 0x09, 0x04, 0x0a, 0x02, 0x31, 0x73, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09,
	0x82, 0xe2, 0x09, 0x05, 0x0a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x39, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x82, 0xe2, 0x09, 0x0b,
	0x0a, 0x09, 0x58, 0x2d, 0x52, 0x65, 0x61, 0x6c, 0x2d, 0x49, 0x70, 0x52, 0x0e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x05, 0x9a, 0xe2, 0x09,
	0x01, 0x2a, 0x3a, 0x05, 0x9a, 0xe2, 0x09, 0x01, 0x2a, 0x1a, 0x9e, 0x04, 0x0a, 0x08, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x82, 0xe2, 0x09, 0x0a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x82, 0xe2,
	0x09, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0x82, 0xe2, 0x09, 0x0b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73,
	0x74, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x82, 0xe2, 0x09, 0x06, 0x0a,
	0x04, 0x35, 0x34, 0x33, 0x32, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x82, 0xe2, 0x09, 0x0a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0x82, 0xe2, 0x09, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x78, 0x2c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x73, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x82, 0xe2, 0x09, 0x0d, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x2d, 0x66, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x73, 0x73, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x39, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0x82,
	0xe2, 0x09, 0x04, 0x0a, 0x02, 0x31, 0x30, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x32, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x73,
	0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0x82, 0xe2, 0x09, 0x07, 0x0a, 0x05, 0x32, 0x30, 0x30, 0x6d, 0x73, 0x52, 0x0d, 0x73, 0x6c, 0x6f,
	0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x3a, 0x1e, 0x9a, 0xe2, 0x09, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x9a, 0xe2, 0x09, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x9a, 0xe2, 0x09, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0xd1, 0x04, 0x0a, 0x04, 0x53,
	0x6f, 0x6c, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0x82, 0xe2, 0x09, 0x17, 0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x38, 0x39, 0x38, 0x33,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x82, 0xe2,
	0x09, 0x05, 0x0a, 0x03, 0x6d, 0x65, 0x78, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x82, 0xe2, 0x09,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x78, 0x5f, 0x72, 0x6b, 0x69, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x31, 0x30,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x82, 0xe2, 0x09, 0x04, 0x0a,
	0x02, 0x32, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x61, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x12, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x82, 0xe2, 0x09, 0x02, 0x10, 0x01, 0x9a,
	0xe2, 0x09, 0x02, 0x08, 0x01, 0x52, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x61, 0x75, 0x74, 0x68,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x09, 0x82, 0xe2, 0x09, 0x05, 0x0a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x0e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4c, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0c, 0x82, 0xe2, 0x09, 0x08, 0x0a, 0x06, 0x31, 0x30, 0x30, 0x30, 0x6d, 0x73, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x3a, 0x12, 0x9a, 0xe2, 0x09, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x9a, 0xe2, 0x09, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0xd6,
	0x03, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x82, 0xe2, 0x09, 0x0b,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0x82, 0xe2, 0x09, 0x06, 0x0a, 0x04, 0x36, 0x33, 0x37, 0x39, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x82, 0xe2, 0x09, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x64, 0x62, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0x82, 0xe2, 0x09, 0x03, 0x0a, 0x01, 0x31, 0x52, 0x02,
	0x64, 0x62, 0x12, 0x39, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x08, 0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x31, 0x30, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x4e, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x08, 0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x32, 0x73, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x5a, 0x0a,
	0x15, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x82, 0xe2, 0x09, 0x07, 0x0a, 0x05, 0x32,
	0x30, 0x30, 0x6d, 0x73, 0x52, 0x13, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x47, 0x72,
	0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x5f, 0x74, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x82, 0xe2, 0x09, 0x07,
	0x0a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x75, 0x73, 0x65, 0x54, 0x6c, 0x73, 0x12,
	0x2f, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x82, 0xe2, 0x09, 0x05, 0x0a, 0x03, 0x6d,
	0x65, 0x78, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x53, 0x75, 0x62, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x3a, 0x05, 0x9a, 0xe2, 0x09, 0x01, 0x2a, 0x1a, 0xc7, 0x09, 0x0a, 0x05, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0xe2, 0x09, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x92, 0xe2, 0x09, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x92, 0xe2, 0x09, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x1b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x34,
	0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0xfe, 0x06, 0x0a, 0x06, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x82, 0xe2, 0x09, 0x07, 0x0a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x06, 0x82, 0xe2, 0x09, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x04, 0x82, 0xe2, 0x09, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x72, 0x69, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x39, 0x82, 0xe2, 0x09, 0x35, 0x0a,
	0x33, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x12, 0x37, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x18, 0x6b, 0x65, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0x82, 0xe2, 0x09,
	0x04, 0x0a, 0x02, 0x32, 0x30, 0x52, 0x15, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x15,
	0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x32, 0x73,
	0x52, 0x12, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x17, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x65, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x48, 0x82, 0xe2, 0x09, 0x02, 0x10, 0x01, 0x8a, 0xe2, 0x09,
	0x3e, 0x12, 0x3c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x69,
	0x6e, 0x20, 0x50, 0x45, 0x4d, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x4a, 0x57, 0x54, 0x73, 0x52,
	0x14, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x50, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x82, 0xe2,
	0x09, 0x07, 0x0a, 0x05, 0x52, 0x53, 0x32, 0x35, 0x36, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x12, 0x51, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08,
	0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x31, 0x6d, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x64, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x15, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x31, 0x68, 0x52, 0x13,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09,
	0x82, 0xe2, 0x09, 0x05, 0x0a, 0x03, 0x31, 0x32, 0x68, 0x52, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x3a,
	0x08, 0x9a, 0xe2, 0x09, 0x04, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x26, 0x9a, 0xe2, 0x09, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x9a, 0xe2, 0x09, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x9a,
	0xe2, 0x09, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x9a, 0xe2, 0x09, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x28, 0x0a, 0x07, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x72, 0x69, 0x1a, 0x6f, 0x0a, 0x0b, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x82, 0xe2, 0x09, 0x08, 0x0a, 0x06, 0x43, 0x41, 0x43, 0x48,
	0x45, 0x44, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1e, 0x9a, 0xe2,
	0x09, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x9a, 0xe2, 0x09, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x9a, 0xe2, 0x09, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x6d, 0x0a, 0x09,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x65, 0x70,
	0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64,
	0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0c, 0x82, 0xe2, 0x09, 0x08, 0x0a, 0x06, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x44, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1e, 0x9a, 0xe2, 0x09,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x9a, 0xe2, 0x09, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x9a, 0xe2, 0x09, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x5b, 0x0a, 0x0c, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x82, 0xe2, 0x09, 0x08, 0x0a, 0x06, 0x43, 0x41, 0x43,
	0x48, 0x45, 0x44, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x09, 0x9a,
	0xe2, 0x09, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0xd9, 0x01, 0x0a, 0x04, 0x4a, 0x77, 0x6b,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x55, 0x72, 0x69, 0x12, 0x39, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x32, 0x30,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x82, 0xe2, 0x09, 0x04, 0x0a,
	0x02, 0x32, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x3a, 0x1e, 0x9a, 0xe2, 0x09, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x9a, 0xe2, 0x09, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x9a, 0xe2, 0x09, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x6c, 0x0a, 0x04, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x43, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x82, 0xe2, 0x09,
	0x04, 0x0a, 0x02, 0x35, 0x6d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x1f, 0x9a, 0xe2, 0x09, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x9a,
	0xe2, 0x09, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x9a, 0xe2, 0x09, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x70, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x35, 0x6d, 0x52, 0x0d,
	0x73, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x15, 0x9a,
	0xe2, 0x09, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x9a, 0xe2, 0x09, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x1a, 0xc6, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e,
	0x67, 0x12, 0xab, 0x01, 0x0a, 0x1f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x64, 0x34,
	0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x39, 0x82, 0xe2, 0x09, 0x35, 0x0a, 0x0b, 0x4c, 0x41, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x1a, 0x26, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x52, 0x1d, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x3a,
	0x0c, 0x9a, 0xe2, 0x09, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xad, 0x02,
	0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x82, 0xe2, 0x09, 0x06, 0x0a, 0x04, 0x77, 0x61, 0x72, 0x6e, 0x52, 0x0c, 0x6c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x72, 0x70, 0x63, 0x12, 0x40, 0x0a, 0x16, 0x72,
	0x65, 0x64, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x82, 0xe2, 0x09,
	0x06, 0x0a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x14, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x4a, 0x0a,
	0x13, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a, 0x82, 0xe2, 0x09, 0x16,
	0x0a, 0x14, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x2c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x0b, 0x82, 0xe2, 0x09, 0x07, 0x0a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0x82, 0xe2, 0x09, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x3a, 0x05, 0x9a, 0xe2, 0x09, 0x01, 0x2a, 0x1a, 0xc9, 0x01,
	0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x16, 0x70,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x82, 0xe2, 0x09, 0x05, 0x0a, 0x03, 0x31, 0x35,
	0x73, 0x52, 0x14, 0x70, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x08, 0x82, 0xe2, 0x09, 0x04, 0x0a, 0x02, 0x33, 0x73, 0x52, 0x14, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x3a, 0x05, 0x9a, 0xe2, 0x09, 0x01, 0x2a, 0x1a, 0x40, 0x0a, 0x04, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x2c, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x82, 0xe2, 0x09, 0x02, 0x10,
	0x01, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x3a,
	0x0a, 0x9a, 0xe2, 0x09, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xe0, 0x07, 0x0a, 0x0a,
	0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x34, 0x6c,
	0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x63, 0x0a, 0x13,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x34, 0x6c, 0x2e,
	0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x11,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e,
	0x67, 0x1a, 0xaa, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x98, 0x01, 0x0a,
	0x19, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x5c, 0x82, 0xe2, 0x09, 0x06, 0x0a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x8a, 0xe2, 0x09, 0x4e,
	0x12, 0x4c, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x63, 0x65, 0x72, 0x74, 0x61,
	0x69, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x53, 0x6f, 0x6c, 0x72, 0x20, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20,
	0x61, 0x20, 0x35, 0x30, 0x30, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x17,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x3a, 0x05, 0x9a, 0xe2, 0x09, 0x01, 0x2a, 0x1a, 0xfd,
	0x04, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x50, 0x61, 0x72,
	0x73, 0x69, 0x6e, 0x67, 0x12, 0x74, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x60, 0x82, 0xe2, 0x09, 0x07, 0x0a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x8a,
	0xe2, 0x09, 0x51, 0x12, 0x4f, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x61, 0x75, 0x74, 0x68, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x7a, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x62, 0x82, 0xe2, 0x09, 0x07,
	0x0a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x8a, 0xe2, 0x09, 0x53, 0x12, 0x51, 0x49, 0x66, 0x20,
	0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x76, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x60, 0x82, 0xe2, 0x09, 0x06, 0x0a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x8a, 0xe2, 0x09, 0x52, 0x12, 0x50, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x61,
	0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x7f,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x63, 0x82, 0xe2, 0x09, 0x06, 0x0a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x8a, 0xe2, 0x09, 0x55,
	0x12, 0x53, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x61, 0x6e, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x76, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x60,
	0x82, 0xe2, 0x09, 0x06, 0x0a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x8a, 0xe2, 0x09, 0x52, 0x12, 0x50,
	0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x77, 0x69, 0x6c,
	0x6c, 0x20, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x05, 0x9a, 0xe2, 0x09, 0x01, 0x2a, 0x1a, 0x8f,
	0x04, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4d, 0x0a, 0x0c, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0x82, 0xe2, 0x09, 0x0c, 0x0a,
	0x0a, 0x4d, 0x4f, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x52, 0x0b, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77,
	0x6d, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64,
	0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x6d, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x6d, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x1a, 0xdd, 0x02, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x6d, 0x61, 0x69, 0x6c, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x82, 0xe2, 0x09, 0x1e, 0x0a, 0x1c, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x6d, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x65, 0x74, 0x52, 0x0b, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x82, 0xe2,
	0x09, 0x1c, 0x0a, 0x1a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x6d, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x65, 0x74, 0x52, 0x09,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x70, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x82,
	0xe2, 0x09, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x50, 0x0a, 0x15, 0x6e, 0x6f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0x82, 0xe2, 0x09, 0x18, 0x0a, 0x16, 0x6e, 0x6f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x40, 0x64, 0x61, 0x74, 0x61, 0x34, 0x6c, 0x69, 0x66, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x65, 0x52,
	0x13, 0x6e, 0x6f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x3a, 0x0c, 0x9a, 0xe2, 0x09, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x0c, 0x9a, 0xe2, 0x09, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x96, 0x0a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a,
	0x10, 0x62, 0x69, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65,
	0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x49, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x62, 0x69, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78,
	0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x52, 0x05, 0x62,
	0x6c, 0x6f, 0x62, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63,
	0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x92, 0x02, 0x0a, 0x0e, 0x42, 0x49, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x28, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x82,
	0xe2, 0x09, 0x10, 0x0a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0xb6, 0x01, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9d, 0x01, 0x82, 0xe2, 0x09,
	0x02, 0x10, 0x01, 0x8a, 0xe2, 0x09, 0x76, 0x0a, 0x1b, 0x42, 0x49, 0x20, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x1a, 0x57, 0x4e, 0x6f, 0x74, 0x65, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x20, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x20, 0x60, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x3c, 0x45, 0x4e, 0x56, 0x3e, 0x2f,
	0x70, 0x68, 0x64, 0x70, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x60, 0x2e, 0x9a, 0xe2, 0x09,
	0x19, 0x12, 0x17, 0x42, 0x49, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x3a, 0x05, 0x9a, 0xe2, 0x09, 0x01, 0x2a, 0x1a, 0xa7, 0x01, 0x0a, 0x05, 0x42, 0x6c,
	0x6f, 0x62, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x5a, 0x82, 0xe2, 0x09, 0x0c, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x8a, 0xe2, 0x09, 0x46, 0x12, 0x44, 0x54, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x62, 0x20,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x20, 0x61, 0x73, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x20, 0x60, 0x44, 0x42, 0x60, 0x20, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x15, 0x9a, 0xe2,
	0x09, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x9a, 0xe2, 0x09, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x1a, 0xf3, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36,
	0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0xe2, 0x09, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x92, 0xe2, 0x09, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x92, 0xe2, 0x09, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0x82, 0xe2, 0x09, 0x03, 0x0a, 0x01,
	0x2f, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x08, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0x82, 0xe2,
	0x09, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x45, 0x0a,
	0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x64, 0x34, 0x6c, 0x2e, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x4d, 0x65, 0x78, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x06, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x12, 0xf8, 0x01, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xb5, 0x01, 0x82, 0xe2, 0x09, 0x06, 0x0a,
	0x04, 0x31, 0x38, 0x30, 0x73, 0x8a, 0xe2, 0x09, 0xa6, 0x01, 0x0a, 0x29, 0x4d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x79,
	0x20, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x79, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x20, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x68, 0x61, 0x73, 0x68, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x20, 0x61, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x20, 0x75, 0x70, 0x64, 0x61, 0x65, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e,
	0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a,
	0x9b, 0x01, 0x0a, 0x06, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x82, 0xe2, 0x09, 0x06, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x82, 0xe2, 0x09,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4b, 0x65, 0x79, 0x50, 0x65,
	0x6d, 0x3a, 0x0a, 0x9a, 0xe2, 0x09, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x0a, 0x9a,
	0xe2, 0x09, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x6a, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0x82, 0xe2, 0x09, 0x02, 0x20, 0x01, 0x52, 0x05, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0x82, 0xe2, 0x09, 0x02, 0x20, 0x01, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x25,
	0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0x82, 0xe2, 0x09, 0x02, 0x20, 0x01, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x2a, 0x3a, 0x0a, 0x1b, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x01, 0x2a, 0x22, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x43,
	0x48, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x2d, 0x0a, 0x0b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4c, 0x4f, 0x57, 0x4d, 0x41, 0x49, 0x4c,
	0x45, 0x52, 0x10, 0x01, 0x42, 0x4a, 0x82, 0xb5, 0x18, 0x09, 0x4d, 0x65, 0x78, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x65, 0x73, 0x75, 0x6e, 0x64, 0x68, 0x65, 0x69, 0x74, 0x73, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x72, 0x6b, 0x69, 0x2d, 0x6d, 0x65, 0x78, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x6d, 0x65, 0x78, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x66, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_shared_cfg_mexcfg_proto_rawDescOnce sync.Once
	file_shared_cfg_mexcfg_proto_rawDescData = file_shared_cfg_mexcfg_proto_rawDesc
)

func file_shared_cfg_mexcfg_proto_rawDescGZIP() []byte {
	file_shared_cfg_mexcfg_proto_rawDescOnce.Do(func() {
		file_shared_cfg_mexcfg_proto_rawDescData = protoimpl.X.CompressGZIP(file_shared_cfg_mexcfg_proto_rawDescData)
	})
	return file_shared_cfg_mexcfg_proto_rawDescData
}

var file_shared_cfg_mexcfg_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_shared_cfg_mexcfg_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_shared_cfg_mexcfg_proto_goTypes = []interface{}{
	(DuplicateDetectionAlgorithm)(0),               // 0: d4l.mex.cfg.DuplicateDetectionAlgorithm
	(RepoType)(0),                                  // 1: d4l.mex.cfg.RepoType
	(EmailerType)(0),                               // 2: d4l.mex.cfg.EmailerType
	(*MexConfig)(nil),                              // 3: d4l.mex.cfg.MexConfig
	(*Version)(nil),                                // 4: d4l.mex.cfg.Version
	(*MexConfig_Web)(nil),                          // 5: d4l.mex.cfg.MexConfig.Web
	(*MexConfig_Postgres)(nil),                     // 6: d4l.mex.cfg.MexConfig.Postgres
	(*MexConfig_Solr)(nil),                         // 7: d4l.mex.cfg.MexConfig.Solr
	(*MexConfig_Redis)(nil),                        // 8: d4l.mex.cfg.MexConfig.Redis
	(*MexConfig_OAuth)(nil),                        // 9: d4l.mex.cfg.MexConfig.OAuth
	(*MexConfig_Codings)(nil),                      // 10: d4l.mex.cfg.MexConfig.Codings
	(*MexConfig_EntityTypes)(nil),                  // 11: d4l.mex.cfg.MexConfig.EntityTypes
	(*MexConfig_FieldDefs)(nil),                    // 12: d4l.mex.cfg.MexConfig.FieldDefs
	(*MexConfig_SearchConfig)(nil),                 // 13: d4l.mex.cfg.MexConfig.SearchConfig
	(*MexConfig_Jwks)(nil),                         // 14: d4l.mex.cfg.MexConfig.Jwks
	(*MexConfig_Jobs)(nil),                         // 15: d4l.mex.cfg.MexConfig.Jobs
	(*MexConfig_AutoIndexer)(nil),                  // 16: d4l.mex.cfg.MexConfig.AutoIndexer
	(*MexConfig_Indexing)(nil),                     // 17: d4l.mex.cfg.MexConfig.Indexing
	(*MexConfig_Logging)(nil),                      // 18: d4l.mex.cfg.MexConfig.Logging
	(*MexConfig_Telemetry)(nil),                    // 19: d4l.mex.cfg.MexConfig.Telemetry
	(*MexConfig_Auth)(nil),                         // 20: d4l.mex.cfg.MexConfig.Auth
	(*MexConfig_Strictness)(nil),                   // 21: d4l.mex.cfg.MexConfig.Strictness
	(*MexConfig_Notify)(nil),                       // 22: d4l.mex.cfg.MexConfig.Notify
	(*MexConfig_Services)(nil),                     // 23: d4l.mex.cfg.MexConfig.Services
	(*MexConfig_Web_CACerts)(nil),                  // 24: d4l.mex.cfg.MexConfig.Web.CACerts
	(*MexConfig_Web_IPFilter)(nil),                 // 25: d4l.mex.cfg.MexConfig.Web.IPFilter
	(*MexConfig_Web_RateLimiting)(nil),             // 26: d4l.mex.cfg.MexConfig.Web.RateLimiting
	(*MexConfig_OAuth_Server)(nil),                 // 27: d4l.mex.cfg.MexConfig.OAuth.Server
	(*MexConfig_Strictness_Search)(nil),            // 28: d4l.mex.cfg.MexConfig.Strictness.Search
	(*MexConfig_Strictness_StrictJSONParsing)(nil), // 29: d4l.mex.cfg.MexConfig.Strictness.StrictJSONParsing
	(*MexConfig_Notify_Flowmailer)(nil),            // 30: d4l.mex.cfg.MexConfig.Notify.Flowmailer
	(*MexConfig_Services_BIEventsFilter)(nil),      // 31: d4l.mex.cfg.MexConfig.Services.BIEventsFilter
	(*MexConfig_Services_Blobs)(nil),               // 32: d4l.mex.cfg.MexConfig.Services.Blobs
	(*MexConfig_Services_Config)(nil),              // 33: d4l.mex.cfg.MexConfig.Services.Config
	(*MexConfig_Services_Config_Github)(nil),       // 34: d4l.mex.cfg.MexConfig.Services.Config.Github
	(*durationpb.Duration)(nil),                    // 35: google.protobuf.Duration
}
var file_shared_cfg_mexcfg_proto_depIdxs = []int32{
	4,  // 0: d4l.mex.cfg.MexConfig.version:type_name -> d4l.mex.cfg.Version
	5,  // 1: d4l.mex.cfg.MexConfig.web:type_name -> d4l.mex.cfg.MexConfig.Web
	6,  // 2: d4l.mex.cfg.MexConfig.db:type_name -> d4l.mex.cfg.MexConfig.Postgres
	7,  // 3: d4l.mex.cfg.MexConfig.solr:type_name -> d4l.mex.cfg.MexConfig.Solr
	8,  // 4: d4l.mex.cfg.MexConfig.redis:type_name -> d4l.mex.cfg.MexConfig.Redis
	9,  // 5: d4l.mex.cfg.MexConfig.oauth:type_name -> d4l.mex.cfg.MexConfig.OAuth
	10, // 6: d4l.mex.cfg.MexConfig.codings:type_name -> d4l.mex.cfg.MexConfig.Codings
	11, // 7: d4l.mex.cfg.MexConfig.entity_types:type_name -> d4l.mex.cfg.MexConfig.EntityTypes
	12, // 8: d4l.mex.cfg.MexConfig.field_defs:type_name -> d4l.mex.cfg.MexConfig.FieldDefs
	13, // 9: d4l.mex.cfg.MexConfig.search_config:type_name -> d4l.mex.cfg.MexConfig.SearchConfig
	14, // 10: d4l.mex.cfg.MexConfig.jwks:type_name -> d4l.mex.cfg.MexConfig.Jwks
	15, // 11: d4l.mex.cfg.MexConfig.jobs:type_name -> d4l.mex.cfg.MexConfig.Jobs
	16, // 12: d4l.mex.cfg.MexConfig.auto_indexer:type_name -> d4l.mex.cfg.MexConfig.AutoIndexer
	17, // 13: d4l.mex.cfg.MexConfig.indexing:type_name -> d4l.mex.cfg.MexConfig.Indexing
	18, // 14: d4l.mex.cfg.MexConfig.logging:type_name -> d4l.mex.cfg.MexConfig.Logging
	19, // 15: d4l.mex.cfg.MexConfig.telemetry:type_name -> d4l.mex.cfg.MexConfig.Telemetry
	20, // 16: d4l.mex.cfg.MexConfig.auth:type_name -> d4l.mex.cfg.MexConfig.Auth
	23, // 17: d4l.mex.cfg.MexConfig.services:type_name -> d4l.mex.cfg.MexConfig.Services
	21, // 18: d4l.mex.cfg.MexConfig.strictness:type_name -> d4l.mex.cfg.MexConfig.Strictness
	22, // 19: d4l.mex.cfg.MexConfig.notify:type_name -> d4l.mex.cfg.MexConfig.Notify
	35, // 20: d4l.mex.cfg.MexConfig.Web.read_timeout:type_name -> google.protobuf.Duration
	35, // 21: d4l.mex.cfg.MexConfig.Web.write_timeout:type_name -> google.protobuf.Duration
	35, // 22: d4l.mex.cfg.MexConfig.Web.idle_timeout:type_name -> google.protobuf.Duration
	24, // 23: d4l.mex.cfg.MexConfig.Web.ca_certs:type_name -> d4l.mex.cfg.MexConfig.Web.CACerts
	25, // 24: d4l.mex.cfg.MexConfig.Web.ip_filter:type_name -> d4l.mex.cfg.MexConfig.Web.IPFilter
	26, // 25: d4l.mex.cfg.MexConfig.Web.rate_limiting:type_name -> d4l.mex.cfg.MexConfig.Web.RateLimiting
	35, // 26: d4l.mex.cfg.MexConfig.Postgres.connection_pause:type_name -> google.protobuf.Duration
	35, // 27: d4l.mex.cfg.MexConfig.Postgres.slow_threshold:type_name -> google.protobuf.Duration
	35, // 28: d4l.mex.cfg.MexConfig.Solr.connection_pause:type_name -> google.protobuf.Duration
	35, // 29: d4l.mex.cfg.MexConfig.Solr.commit_within:type_name -> google.protobuf.Duration
	35, // 30: d4l.mex.cfg.MexConfig.Redis.connection_pause:type_name -> google.protobuf.Duration
	35, // 31: d4l.mex.cfg.MexConfig.Redis.shutdown_grace_period:type_name -> google.protobuf.Duration
	27, // 32: d4l.mex.cfg.MexConfig.OAuth.server:type_name -> d4l.mex.cfg.MexConfig.OAuth.Server
	1,  // 33: d4l.mex.cfg.MexConfig.EntityTypes.repo_type:type_name -> d4l.mex.cfg.RepoType
	1,  // 34: d4l.mex.cfg.MexConfig.FieldDefs.repo_type:type_name -> d4l.mex.cfg.RepoType
	1,  // 35: d4l.mex.cfg.MexConfig.SearchConfig.repo_type:type_name -> d4l.mex.cfg.RepoType
	35, // 36: d4l.mex.cfg.MexConfig.Jwks.connection_pause:type_name -> google.protobuf.Duration
	35, // 37: d4l.mex.cfg.MexConfig.Jobs.expiration:type_name -> google.protobuf.Duration
	35, // 38: d4l.mex.cfg.MexConfig.AutoIndexer.set_expiration:type_name -> google.protobuf.Duration
	0,  // 39: d4l.mex.cfg.MexConfig.Indexing.duplication_detection_algorithm:type_name -> d4l.mex.cfg.DuplicateDetectionAlgorithm
	35, // 40: d4l.mex.cfg.MexConfig.Telemetry.pinger_update_interval:type_name -> google.protobuf.Duration
	35, // 41: d4l.mex.cfg.MexConfig.Telemetry.status_update_interval:type_name -> google.protobuf.Duration
	28, // 42: d4l.mex.cfg.MexConfig.Strictness.search:type_name -> d4l.mex.cfg.MexConfig.Strictness.Search
	29, // 43: d4l.mex.cfg.MexConfig.Strictness.strict_json_parsing:type_name -> d4l.mex.cfg.MexConfig.Strictness.StrictJSONParsing
	2,  // 44: d4l.mex.cfg.MexConfig.Notify.emailer_type:type_name -> d4l.mex.cfg.EmailerType
	30, // 45: d4l.mex.cfg.MexConfig.Notify.flowmailer:type_name -> d4l.mex.cfg.MexConfig.Notify.Flowmailer
	31, // 46: d4l.mex.cfg.MexConfig.Services.bi_events_filter:type_name -> d4l.mex.cfg.MexConfig.Services.BIEventsFilter
	32, // 47: d4l.mex.cfg.MexConfig.Services.blobs:type_name -> d4l.mex.cfg.MexConfig.Services.Blobs
	33, // 48: d4l.mex.cfg.MexConfig.Services.config:type_name -> d4l.mex.cfg.MexConfig.Services.Config
	35, // 49: d4l.mex.cfg.MexConfig.Web.CACerts.access_pause:type_name -> google.protobuf.Duration
	35, // 50: d4l.mex.cfg.MexConfig.Web.RateLimiting.period:type_name -> google.protobuf.Duration
	35, // 51: d4l.mex.cfg.MexConfig.OAuth.Server.key_file_access_pause:type_name -> google.protobuf.Duration
	35, // 52: d4l.mex.cfg.MexConfig.OAuth.Server.auth_code_validity:type_name -> google.protobuf.Duration
	35, // 53: d4l.mex.cfg.MexConfig.OAuth.Server.access_token_validity:type_name -> google.protobuf.Duration
	35, // 54: d4l.mex.cfg.MexConfig.OAuth.Server.refresh_token_validity:type_name -> google.protobuf.Duration
	34, // 55: d4l.mex.cfg.MexConfig.Services.Config.github:type_name -> d4l.mex.cfg.MexConfig.Services.Config.Github
	35, // 56: d4l.mex.cfg.MexConfig.Services.Config.update_timeout:type_name -> google.protobuf.Duration
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_shared_cfg_mexcfg_proto_init() }
func file_shared_cfg_mexcfg_proto_init() {
	if File_shared_cfg_mexcfg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_shared_cfg_mexcfg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Web); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Postgres); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Solr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Redis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_OAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Codings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_EntityTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_FieldDefs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_SearchConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Jwks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Jobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_AutoIndexer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Indexing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Logging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Strictness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Notify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Services); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Web_CACerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Web_IPFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Web_RateLimiting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_OAuth_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Strictness_Search); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Strictness_StrictJSONParsing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Notify_Flowmailer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Services_BIEventsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Services_Blobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Services_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_cfg_mexcfg_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MexConfig_Services_Config_Github); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shared_cfg_mexcfg_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shared_cfg_mexcfg_proto_goTypes,
		DependencyIndexes: file_shared_cfg_mexcfg_proto_depIdxs,
		EnumInfos:         file_shared_cfg_mexcfg_proto_enumTypes,
		MessageInfos:      file_shared_cfg_mexcfg_proto_msgTypes,
	}.Build()
	File_shared_cfg_mexcfg_proto = out.File
	file_shared_cfg_mexcfg_proto_rawDesc = nil
	file_shared_cfg_mexcfg_proto_goTypes = nil
	file_shared_cfg_mexcfg_proto_depIdxs = nil
}
